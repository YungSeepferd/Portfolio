name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feat/*']
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npm run type-check
      
      - name: Lint
        run: npm run lint
        
      - name: Security audit
        run: npm audit --audit-level moderate
      
      - name: Format check
        run: npm run format:check
        
      - name: Bundle size check
        run: |
          npm run build
          npx bundlewatch --config bundlewatch.config.json
        continue-on-error: true
      
      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Validate project schema
        run: npm run test -- src/test/projects.validation.test.ts --run

      - name: Check media assets exist
        run: |
          node -e "const { getProjects } = require('./dist/components/work/data'); const { normalizeProjects } = require('./dist/utils/normalizeProject.js'); const fs = require('fs'); const projects = getProjects(); const norm = normalizeProjects(projects); const missing=[]; norm.forEach(p=>{const media = Array.isArray(p.media)?p.media:[]; media.forEach(m=>{if(m.src && m.src.startsWith('/') && !fs.existsSync('.'+m.src)){missing.push(m.src);}}); p.sections.forEach(s=>{const arr = Array.isArray(s.media)?s.media:[]; arr.forEach(m=>{if(m.src && m.src.startsWith('/') && !fs.existsSync('.'+m.src)){missing.push(m.src);}});});}); if(missing.length){console.error('Missing media files:', missing); process.exit(1);}"
        continue-on-error: true
      
      - name: Coverage threshold check
        run: |
          COVERAGE=$(npm run test:coverage:json | grep -o '"total":{\"lines\":{\"pct\":[0-9.]*' | grep -o '[0-9.]*$')
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Coverage $COVERAGE% is below threshold of 70%"
            exit 1
          fi
        continue-on-error: true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
        env:
          VITE_ENABLE_3D_BACKGROUND: true
          VITE_ENABLE_SOUND: true
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/
          retention-days: 7

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build/
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
