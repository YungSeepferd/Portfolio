import React, { useState, useRef, useCallback } from 'react';
import { 
  Card, 
  CardContent, 
  Typography, 
  Box, 
  useTheme, 
  useMediaQuery, 
  Chip, 
  type SxProps, 
  type Theme 
} from '@mui/material';
import { motion } from 'framer-motion';
import type { ProjectData } from '../../types/project';

// Extend the MediaItem interface to include additional properties
interface ExtendedMediaItem extends Omit<MediaItem, 'url'> {
  src: string;
  poster?: string;
}

// Extend ProjectData to include any additional properties used in the component
interface ExtendedProjectData extends Omit<ProjectData, 'media' | 'links' | 'categories'> {
  media: ExtendedMediaItem[];
  shortDescription?: string;
  cardVariant?: string;
  categories: string[];
}

interface ProjectCardProps {
  project: ExtendedProjectData;
  onClick?: (project: ExtendedProjectData) => void;
}

// Mock components for now - replace with actual implementations
const ProjectCardPreview: React.FC<{ 
  project: ExtendedProjectData; 
  isVisible?: boolean;
  technologies?: string[];
  links?: Array<{ type: string; url: string }>;
}> = ({ project, isVisible, technologies, links }) => (
  <div>Project Preview: {project.title}</div>
);

const CategoryTagList: React.FC<{ 
  categories?: string[];
  sx?: SxProps<Theme>;
}> = ({ categories = [], sx }) => (
  <Box sx={sx}>
    {categories.map((category, index) => (
      <Chip key={index} label={category} sx={{ mr: 1, mb: 1 }} />
    ))}
  </Box>
);

const VideoPlayer: React.FC<{ 
  src: string; 
  autoPlay?: boolean; 
  controls?: boolean;
  containerHeight?: string;
  containerWidth?: string;
  muted?: boolean;
  loop?: boolean;
  poster?: string;
  onError?: () => void;
  showOverlayControls?: boolean;
}> = ({ 
  src, 
  autoPlay = false, 
  controls = true,
  containerHeight = '100%',
  containerWidth = '100%',
  muted = true,
  loop = true,
  poster,
  onError,
  showOverlayControls = false
}) => (
  <Box 
    sx={{ 
      width: containerWidth, 
      height: containerHeight,
      position: 'relative',
      overflow: 'hidden',
      '& video': {
        width: '100%',
        height: '100%',
        objectFit: 'cover',
      }
    }}
  >
    <video 
      src={src}
      autoPlay={autoPlay}
      controls={controls}
      muted={muted}
      loop={loop}
      poster={poster}
      onError={onError}
    />
  </Box>
);

// Utility functions
const isVideo = (src: string): boolean => {
  if (!src) return false;
  return src.endsWith('.mp4') || src.endsWith('.webm');
};

const getPrimaryMediaItem = (project: ExtendedProjectData): { 
  src: string; 
  type: string;
  poster?: string;
} => {
  if (project.media && project.media.length > 0) {
    return { 
      src: project.media[0].src, 
      type: isVideo(project.media[0].src) ? 'video' : 'image',
      poster: project.media[0].poster
    };
  }
  return { 
    src: '', 
    type: 'image',
    poster: '/assets/images/placeholders/project.jpg'
  };
};

/**
 * ProjectCard Component
 *
 * Displays a preview card for a project in the main grid.
 * Shows TechBar and Links on hover via ProjectCardPreview.
 * Enhanced with improved touch handling for mobile scrolling.
 */
const ProjectCard: React.FC<ProjectCardProps> = ({ project, onClick }) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const [isHovered, setIsHovered] = useState(false);
  const touchStartRef = useRef({ x: 0, y: 0, time: 0 });
  const isScrollingRef = useRef(false);

  if (!project) return null;

  const {
    title,
    description,
    shortDescription = description, // Fallback to description if not provided
    categories = [],
    technologies = [],
    links = [],
    cardVariant = 'default',
  } = project;

  // Handle links as either array or object for backward compatibility
  const linksArray = Array.isArray(links)
    ? links
    : links && typeof links === 'object'
      ? Object.values(links)
      : [];

  // Get the primary media and determine if it's a video
  const primaryMedia = getPrimaryMediaItem(project) || {
    type: 'image',
  const [mediaLoadError, setMediaLoadError] = useState(false);
  
  // Fallback to placeholder if media fails to load
  const handleMediaError = () => {
    setMediaLoadError(true);
  };

  // Ensure the media source is properly resolved
  const mediaSource = primaryMedia.src?.startsWith('http') 
    ? primaryMedia.src 
    : `${import.meta.env.BASE_URL || ''}${primaryMedia.src?.startsWith('/') ? '' : '/'}${primaryMedia.src || ''}`;
    
  // Animation for the card itself
  const cardVariants = {
    hidden: { opacity: 0, y: 10 },
    visible: { opacity: 1, y: 0 },
  };

  // Only show hover preview on non-mobile
  const showPreview = !isMobile && isHovered;

  // Maximum number of tags to show on mobile
  const MAX_MOBILE_TAGS = 2; // Changed from 3 to 2 to place +counter in the third position

  // Calculate hidden tags count for mobile
  const hiddenTagsCount =
    isMobile && categories.length > MAX_MOBILE_TAGS ? categories.length - MAX_MOBILE_TAGS : 0;

  // Choose which description to display based on device
  const displayDescription = isMobile && shortDescription ? shortDescription : description;

  // Touch event handlers to differentiate between scrolling and tapping
  const handleTouchStart = (_e: React.TouchEvent) => {
    touchStartX.current = _e.touches[0].clientX;
    touchStartY.current = _e.touches[0].clientY;
  };

  const handleTouchMove = (_e: React.TouchEvent) => {
    if (touchStartX.current === null || touchStartY.current === null) return;
    
    const touchX = _e.touches[0].clientX;
    const touchY = _e.touches[0].clientY;
    
    // Calculate distance moved
    const deltaX = Math.abs(touchX - touchStartX.current);
    const deltaY = Math.abs(touchY - touchStartY.current);
    
    // If the touch moved significantly in the X direction, prevent default to avoid scrolling
    if (deltaX > 10 && deltaX > deltaY) {
      _e.preventDefault();
    }
  };

  const handleTouchEnd = (e: React.TouchEvent) => {
    if (!isMobile) return;
    
    // Only trigger click if not scrolling and touch duration is short
    const touchDuration = Date.now() - touchStartRef.current.time;
    if (!isScrollingRef.current && touchDuration < 300 && onClick) {
      onClick(project);
    }
  };

  return (
    <Card
      component={motion.div}
      variants={cardVariants}
      initial="hidden"
      animate="visible"
      whileHover={!isMobile ? { scale: 1.03, boxShadow: theme.shadows[6] } : {}}
      onMouseEnter={() => {
        if (!isMobile) setIsHovered(true);
      }}
      onMouseLeave={() => {
        if (!isMobile) setIsHovered(false);
      }}
      onClick={(_e) => {
        if (!isMobile && onClick) onClick(project);
      }}
      onTouchStart={handleTouchStart}
      onTouchMove={handleTouchMove}
      onTouchEnd={handleTouchEnd}
      sx={{
        cursor: 'pointer',
        width: '100%',
        // Using different aspect ratio for mobile to provide more space for content
        aspectRatio: { xs: '1 / 1.3', sm: '1 / 1.2', md: '1 / 1' }, // Made taller on mobile
        minHeight: 0,
        display: 'flex',
        flexDirection: 'column',
        position: 'relative',
        overflow: 'hidden',
        borderRadius: theme.shape.borderRadius,
        boxShadow: theme.shadows[2],
        backgroundColor: theme.palette.background.paper,
        transition: 'transform 0.3s ease, box-shadow 0.3s ease',
        touchAction: 'pan-y', // Allow vertical scrolling on touch devices
        '&:hover': !isMobile
          ? {
              transform: 'translateY(-5px)',
              boxShadow: theme.shadows[6],
            }
          : {},
        ...(cardVariant &&
          cardVariant !== 'default' && {
            borderTop: `4px solid ${cardVariant && theme.palette[cardVariant as keyof typeof theme.palette] ? (theme.palette[cardVariant as keyof typeof theme.palette] as any).main : theme.palette.primary.main}`,
          }),
      }}
    >
      {/* Image/Video Area with Overlay */}
      <Box
        sx={{
          position: 'relative',
          width: '100%',
          // Reduce image portion on mobile to give more space to content
          flex: { xs: '0 0 45%', sm: '0 0 50%', md: '0 0 60%' }, // Further reduced on mobile
          minHeight: 0,
        }}
      >
        <Box
          sx={{
            width: '100%',
            height: '100%',
            background: theme.palette.background.default,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            borderBottom: `1px solid ${theme.palette.divider}`,
            borderRadius: theme.shape.borderRadius,
            overflow: 'hidden',
          }}
        >
          {!mediaLoadError && isVideoMedia ? (
            <VideoPlayer
              src={mediaSource}
              containerHeight="100%"
              containerWidth="100%"
              autoPlay={!isMobile}
              muted
              controls={false}
              showOverlayControls={false}
              loop={false}
              poster={primaryMedia.poster || '/assets/images/placeholders/project.jpg'}
              onError={() => setMediaLoadError(true)}
            />
          ) : (
            <Box
              component="img"
              src={mediaLoadError ? '/assets/images/placeholders/project.jpg' : mediaSource}
              alt={`${title} preview`}
              sx={{
                width: '100%',
                height: '100%',
                objectFit: 'cover',
                objectPosition: 'center',
              }}
              onError={handleMediaError}
              loading="lazy"
            />
          )}
        </Box>
        {/* Hover Preview */}
        {showPreview && (
          <ProjectCardPreview
            project={project}
            isVisible={showPreview}
            technologies={project.technologies}
            links={project.links.map(link => ({
              type: link.type,
              url: link.url,
              title: 'title' in link ? (link as any).title : ''
            }))}
          />
        )}
      </Box>
      {/* Content */}
      <CardContent
        sx={{
          flex: '1 1 55%', // Increased content portion on mobile
          display: 'flex',
          flexDirection: 'column',
          p: { xs: 1.75, md: 2 }, // Increased padding slightly on mobile
          minHeight: 0,
          backgroundColor: theme.palette.background.paper,
          justifyContent: 'space-between', // Changed to space-between to push categories to bottom
          overflow: 'hidden',
        }}
      >
        {/* Top content section (title and description) */}
        <Box>
          <Typography
            variant="h6"
            component="h3"
            gutterBottom
            sx={{
              fontWeight: 600,
              color: theme.palette.text.primary,
              fontSize: { xs: '1.05rem', sm: '1.1rem', md: '1.15rem' }, // Increased font size for mobile
              mb: { xs: 0.5, sm: 0.75, md: 1 }, // Slightly increased margin
            }}
          >
            {title}
          </Typography>
          <Typography
            variant="body2"
            color="text.secondary"
            sx={{
              mb: { xs: 0.75, sm: 1, md: 1.5 },
              display: '-webkit-box',
              WebkitLineClamp: { xs: 5, sm: 4, md: 3 }, // Show more lines on mobile
              WebkitBoxOrient: 'vertical',
              overflow: 'hidden',
              fontSize: { xs: '0.9rem', sm: '0.92rem', md: '0.95rem' }, // Slightly increased font size on mobile
              lineHeight: { xs: 1.45, sm: 1.5, md: 1.6 }, // Slightly increased line height
            }}
          >
            {displayDescription}
          </Typography>
        </Box>

        {/* Bottom content section (categories) - pushed to bottom */}
        {categories && categories.length > 0 && (
          <Box
            sx={{
              mt: 'auto',
              pt: { xs: 0.75, sm: 1, md: 1.5 },
              display: 'flex',
              flexWrap: 'wrap',
              alignItems: 'center',
              justifyContent: 'flex-start',
            }}
          >
            {/* Show first MAX_MOBILE_TAGS tags on mobile, followed by +X counter if needed */}
            {isMobile ? (
              // Mobile view with limited tags + counter if needed
              <>
                {categories.slice(0, MAX_MOBILE_TAGS).map((tag, index) => (
                  <Chip
                    key={`tag-${index}`}
                    label={tag}
                    size="small"
                    sx={{
                      height: '22px',
                      fontSize: '0.75rem',
                      backgroundColor: theme.palette.background.default,
                      color: theme.palette.text.secondary,
                      my: 0.25,
                      mr: 0.5,
                      py: 0.25,
                      '& .MuiChip-label': {
                        px: 0.8,
                      },
                    }}
                  />
                ))}
                {hiddenTagsCount > 0 && (
                  <Chip
                    label={`+${hiddenTagsCount}`}
                    size="small"
                    sx={{
                      height: '22px',
                      fontSize: '0.75rem',
                      backgroundColor: theme.palette.background.default,
                      color: theme.palette.text.secondary,
                      fontWeight: 500,
                      my: 0.25,
                      mr: 0.5,
                      borderRadius: '16px',
                      py: 0.25,
                      '& .MuiChip-label': {
                        px: 0.8,
                      },
                    }}
                  />
                )}
              </>
            ) : (
              // Desktop view with all tags
              <CategoryTagList
                categories={categories}
                sx={{
                  display: 'flex',
                  flexWrap: 'wrap',
                  '& .MuiChip-root': {
                    my: 0.5,
                    mr: 1,
                    height: '24px',
                    py: 0.5,
                    fontSize: '0.7rem',
                    '& .MuiChip-label': {
                      px: 1,
                    },
                  },
                }}
              />
            )}
          </Box>
        )}
      </CardContent>
    </Card>
  );
};

export default ProjectCard;
