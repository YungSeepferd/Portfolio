{"version":3,"file":"static/js/854.4211d58a.chunk.js","mappings":"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","sources":["components/common/ErrorBoundary.js","components/hero/skillsData.js","components/hero/HeroContent.js","utils/scrollUtils.js","components/hero/ScrollIndicator.js","components/hero/background3d/constants.js","components/hero/background3d/SceneContext.js","components/hero/background3d/utils/sceneThemeUtils.js","components/hero/background3d/utils/ObjectPool.js","components/hero/background3d/scenes/SphereScene.js","components/hero/background3d/scenes/BoxScene.js","components/hero/background3d/scenes/TorusScene.js","components/hero/background3d/ActiveScene.js","components/hero/background3d/components/LoadingFallback.js","components/hero/background3d/InteractiveCamera.js","components/hero/background3d/hooks/useMouseTracking.js","components/hero/background3d/components/WorldMouseListener.js","components/hero/background3d/Background3D.js","components/hero/background3d/components/InteractionGuide.js","components/hero/Hero.js","components/common/SkillTagList.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Box, Typography, Button, Paper, Divider } from '@mui/material';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport BugReportIcon from '@mui/icons-material/BugReport';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\n\n/**\n * Enhanced ErrorBoundary Component\n * \n * Catches and handles JavaScript errors anywhere in the child component tree.\n * Provides detailed error reporting and recovery options.\n */\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      hasError: false,\n      error: null,\n      errorInfo: null,\n      componentStack: '',\n      showDetails: false,\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Capture error details for logging and display\n    this.setState({\n      errorInfo,\n      componentStack: errorInfo?.componentStack || 'No stack trace available'\n    });\n\n    // Log error to monitoring service or console\n    console.error('Error caught by ErrorBoundary:', error);\n    console.error('Component stack:', errorInfo?.componentStack);\n\n    // Track error with analytics if available\n    if (window.gtag) {\n      window.gtag('event', 'error', {\n        error_message: error?.message || 'Unknown error',\n        error_component: this.props.componentName || 'Unknown component',\n        error_stack: errorInfo?.componentStack?.substring(0, 500) || 'No stack trace',\n        error_type: error?.name || 'Unknown type'\n      });\n    }\n  }\n\n  handleRefresh = () => {\n    // Attempt to recover by refreshing the component\n    this.setState({ \n      hasError: false,\n      error: null,\n      errorInfo: null,\n      componentStack: '',\n      showDetails: false\n    });\n  }\n\n  handleReload = () => {\n    // Reload the entire page as a last resort\n    window.location.reload();\n  }\n\n  toggleDetails = () => {\n    this.setState(prevState => ({\n      showDetails: !prevState.showDetails\n    }));\n  }\n\n  render() {\n    const { hasError, error, componentStack, showDetails } = this.state;\n    const { \n      componentName = 'Component', \n      fallback,\n      errorStyles,\n      children\n    } = this.props;\n\n    if (hasError) {\n      // Render custom fallback if provided\n      if (fallback) {\n        return fallback;\n      }\n\n      // Otherwise, render default error UI\n      return (\n        <Box \n          sx={{\n            p: 3,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            minHeight: '200px',\n            width: '100%',\n            textAlign: 'center',\n            ...errorStyles\n          }}\n        >\n          <ErrorOutlineIcon \n            color=\"error\" \n            sx={{ fontSize: 48, mb: 2 }} \n          />\n          \n          <Typography variant=\"h5\" color=\"error\" gutterBottom>\n            {componentName} encountered a problem\n          </Typography>\n          \n          <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3, maxWidth: '600px' }}>\n            {error?.message || 'An unexpected error occurred. We apologize for the inconvenience.'}\n          </Typography>\n          \n          <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<RefreshIcon />}\n              onClick={this.handleRefresh}\n            >\n              Try Again\n            </Button>\n            \n            <Button\n              variant=\"outlined\"\n              color=\"error\"\n              startIcon={<BugReportIcon />}\n              onClick={this.toggleDetails}\n            >\n              {showDetails ? 'Hide Details' : 'Show Details'}\n            </Button>\n          </Box>\n          \n          {showDetails && (\n            <Paper elevation={2} sx={{ p: 2, width: '100%', maxWidth: '800px', overflow: 'auto', textAlign: 'left' }}>\n              <Typography variant=\"subtitle2\" color=\"error\" gutterBottom>\n                Error Details:\n              </Typography>\n              \n              <Typography variant=\"body2\" component=\"div\" sx={{ mb: 2, fontFamily: 'monospace', fontSize: '0.85rem' }}>\n                <Box component=\"pre\" sx={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>\n                  {error?.toString() || 'Unknown error'}\n                </Box>\n              </Typography>\n              \n              <Divider sx={{ my: 2 }} />\n              \n              <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                Component Stack:\n              </Typography>\n              \n              <Typography variant=\"body2\" component=\"div\" sx={{ fontFamily: 'monospace', fontSize: '0.75rem' }}>\n                <Box component=\"pre\" sx={{ \n                  whiteSpace: 'pre-wrap', \n                  wordBreak: 'break-word',\n                  backgroundColor: 'rgba(0, 0, 0, 0.04)',\n                  p: 1,\n                  borderRadius: 1,\n                  maxHeight: '200px',\n                  overflow: 'auto'\n                }}>\n                  {componentStack}\n                </Box>\n              </Typography>\n            </Paper>\n          )}\n        </Box>\n      );\n    }\n\n    // If no error, render children normally\n    return children;\n  }\n}\n\nexport default ErrorBoundary;\n","/**\n * Skills data for the Hero component\n */\n\n// First row of skills (primary)\nexport const skillsRow1 = ['UX Research & UI Design', 'Interaction Design'];\n\n// Second row of skills (secondary)\nexport const skillsRow2 = ['Haptic Prototyping', 'Sound Design', 'AI Integration', 'Frontend Development'];\n\n// All skills combined \nexport const allSkills = [...skillsRow1, ...skillsRow2];\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Box, Typography, useTheme } from '@mui/material';\nimport { skillsRow1, skillsRow2 } from './skillsData';\nimport SkillTagList from '../common/SkillTagList';\n\n/**\n * HeroContent Component\n * \n * Displays the main hero content including:\n * - Main title\n * - Subtitle\n * - Status text\n * - Skill tags\n * \n * This component is set with pointerEvents: 'none' to allow\n * clicks to pass through to the 3D background\n */\nconst HeroContent = () => {\n  const theme = useTheme();\n  \n  // Animation variants for staggered appearance\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.3,\n        duration: 0.8\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { \n      opacity: 1, \n      y: 0,\n      transition: { duration: 0.6, ease: \"easeOut\" }\n    }\n  };\n  \n  // Determine if mobile for responsive layout\n  const isMobileBreakpoint = theme.breakpoints.values.sm;\n  \n  return (\n    <Box\n      sx={{\n        position: 'relative',\n        width: '100%',\n        maxWidth: '100%',\n        display: 'flex',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        zIndex: 10,\n        pointerEvents: 'none', // All content is non-interactive by default\n        userSelect: 'none',\n        pl: { xs: 2, sm: 4, md: 8, lg: 12 }, // Responsive padding\n      }}\n    >\n      <motion.div\n        initial=\"hidden\"\n        animate=\"visible\"\n        variants={containerVariants}\n        style={{\n          maxWidth: `min(100%, 650px)`,\n          textAlign: window.innerWidth < isMobileBreakpoint ? 'center' : 'left',\n          pointerEvents: 'none',\n        }}\n      >\n        {/* Main Title */}\n        <motion.div variants={itemVariants}>\n          <Typography\n            variant=\"h1\"\n            sx={{\n              fontSize: {\n                xs: '2.5rem', // Mobile\n                sm: '3.5rem', // Tablet\n                md: '4.5rem', // Desktop\n                lg: '5rem'    // Large desktop\n              },\n              fontWeight: 700,\n              lineHeight: 1.2,\n              mb: 1,\n              color: theme.palette.text.primary,\n              letterSpacing: '-0.5px',\n            }}\n          >\n            Vincent Göke\n          </Typography>\n        </motion.div>\n\n        {/* Subtitle */}\n        <motion.div variants={itemVariants}>\n          <Typography\n            variant=\"h4\"\n            component=\"h2\"\n            sx={{\n              fontSize: {\n                xs: '0.8rem',\n                sm: '1rem',\n                md: '1.35rem'\n              },\n              fontWeight: 500,\n              mb: 4,\n              color: theme.palette.secondary.main, // Changed to secondary (yellow) color\n            }}\n          >\n            Creative Technologist & Interaction Designer\n          </Typography>\n        </motion.div>\n        \n        {/* Status Text */}\n        <motion.div variants={itemVariants}>\n          <Typography \n            variant=\"body1\"\n            sx={{ \n              mb: 2,\n              fontSize: '1.1rem',\n              lineHeight: 1.7,\n              color: theme.palette.text.secondary,\n            }}\n          >\n            Fulltime | Available from June 2025 | On-Site, Hybrid, Remote\n          </Typography>\n        </motion.div>\n        \n        {/* Skill Tags */}\n        <Box \n          component={motion.div} \n          variants={itemVariants} \n          sx={{ pointerEvents: 'none' }}\n        >\n          <Box \n            sx={{ \n              display: 'flex', \n              flexWrap: 'wrap',\n              gap: 1,\n              mb: 1.5,\n              justifyContent: window.innerWidth < isMobileBreakpoint ? 'center' : 'flex-start',\n            }}\n          >\n            {skillsRow1.map((skill, index) => (\n              <SkillTagList\n                key={index}\n                label={skill}\n                size=\"medium\"\n                variant=\"skill\"\n                sx={{ pointerEvents: 'none' }}\n              />\n            ))}\n          </Box>\n          <Box \n            sx={{ \n              display: 'flex', \n              flexWrap: 'wrap',\n              gap: 1,\n              justifyContent: window.innerWidth < isMobileBreakpoint ? 'center' : 'flex-start',\n            }}\n          >\n            {skillsRow2.map((skill, index) => (\n              <SkillTagList\n                key={index}\n                label={skill}\n                size=\"medium\"\n                variant=\"skill\"\n                sx={{ pointerEvents: 'none' }}\n              />\n            ))}\n          </Box>\n        </Box>\n      </motion.div>\n    </Box>\n  );\n};\n\nexport default HeroContent;\n","/**\n * Utility functions for scrolling behavior in the application\n */\n\n/**\n * Scrolls to a specific section on the page by ID\n * with smooth scrolling behavior\n * \n * @param {string} sectionId - The ID of the section to scroll to\n * @param {Object} options - Optional scroll configuration\n * @param {number} options.offset - Offset from the top in pixels\n */\nexport const scrollToSection = (sectionId, options = {}) => {\n  // Default options\n  const { offset = -70 } = options;\n  // Remove unused duration parameter\n  \n  try {\n    const targetElement = document.getElementById(sectionId);\n    if (!targetElement) {\n      console.warn(`Section with ID \"${sectionId}\" not found`);\n      return;\n    }\n    \n    const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset + offset;\n    \n    // Use scrollTo with behavior: smooth for modern browsers\n    window.scrollTo({\n      top: targetPosition,\n      behavior: 'smooth'\n    });\n    \n    // Track scroll events in analytics if available\n    if (window.gtag) {\n      window.gtag('event', 'scroll_to_section', {\n        section_id: sectionId\n      });\n    }\n  } catch (error) {\n    console.error('Error scrolling to section:', error);\n  }\n};\n\n/**\n * Checks if an element is in the viewport\n * \n * @param {HTMLElement} element - The element to check\n * @param {number} offset - Optional offset to consider\n * @returns {boolean} - Whether the element is in viewport\n */\nexport const isInViewport = (element, offset = 0) => {\n  if (!element) return false;\n  \n  const rect = element.getBoundingClientRect();\n  return (\n    rect.top + offset < window.innerHeight && \n    rect.bottom > 0\n  );\n};\n\n// Fix anonymous default export\nconst scrollUtils = {\n  scrollToSection,\n  isInViewport\n};\n\nexport default scrollUtils;\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Box, Typography, useTheme } from '@mui/material';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\nimport { scrollToSection } from '../../utils/scrollUtils';\n\n/**\n * ScrollIndicator Component\n * \n * Renders a \"Scroll to explore\" text with animated down arrow\n * Positioned at the bottom center of the hero section\n */\nconst ScrollIndicator = () => {\n  const theme = useTheme();\n  \n  // Handle click to scroll to about section\n  const handleClick = () => {\n    scrollToSection('about');\n  };\n  \n  return (\n    <Box\n      sx={{\n        position: 'absolute',\n        bottom: theme.spacing(6),\n        left: 0,\n        right: 0,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: '100%',\n        cursor: 'pointer',\n        zIndex: 10,\n        pointerEvents: 'auto', // Explicitly enable pointer events for this component\n      }}\n      onClick={handleClick}\n      role=\"button\"\n      aria-label=\"Scroll to explore content\"\n      tabIndex={0}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') handleClick();\n      }}\n    >\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 1.5, duration: 0.8 }}\n        whileHover={{ scale: 1.05 }}\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          padding: theme.spacing(1),\n        }}\n      >\n        <Typography \n          variant=\"caption\" \n          sx={{ \n            mb: 1, \n            color: theme.palette.text.secondary,\n            opacity: 0.8,\n            fontWeight: theme.typography.fontWeightRegular,\n          }}\n        >\n          Scroll to explore\n        </Typography>\n        \n        <motion.div\n          animate={{\n            y: [0, 10, 0],\n            opacity: [0.6, 1, 0.6],\n          }}\n          transition={{\n            duration: 2,\n            repeat: Infinity,\n            repeatType: 'loop',\n          }}\n        >\n          <ArrowDownwardIcon \n            color=\"primary\" \n            fontSize=\"small\"\n          />\n        </motion.div>\n      </motion.div>\n    </Box>\n  );\n};\n\nexport default ScrollIndicator;\n","/**\n * Constants and configuration settings for the 3D background scene\n */\n\n// Shape type identifiers\nexport const SHAPE_TYPES = {\n  SPHERE: 0,\n  BOX: 1,   // Changed from CUBE to BOX for consistency\n  TORUS: 2\n};\n\n// Canvas settings for @react-three/fiber\nexport const CANVAS_SETTINGS = {\n  camera: {\n    position: [0, 0, 16], // Increased from 12 to 16 for a more zoomed-out starting view\n    fov: 45,\n    near: 0.1,\n    far: 1000\n  },\n  gl: {\n    antialias: true,\n    alpha: true,\n    powerPreference: 'high-performance',\n    preserveDrawingBuffer: true\n  }\n};\n\n// Performance settings for different device capabilities\nexport const PERFORMANCE_MODES = {\n  low: {\n    particleCount: 50,\n    segmentCount: 12,\n    dpr: 1\n  },\n  medium: {\n    particleCount: 150,\n    segmentCount: 32,\n    dpr: 1\n  },\n  high: {\n    particleCount: 300,\n    segmentCount: 64,\n    dpr: window.devicePixelRatio || 1\n  }\n};\n\n// Animation timing constants\nexport const ANIMATION = {\n  transitionDuration: 600, // ms\n  hoverTransitionDuration: 300, // ms\n  autoRotateDelay: 3000, // ms\n  autoRotateSpeed: 0.5\n};\n\n// Scene element dimensions\nexport const DIMENSIONS = {\n  sphere: {\n    radius: 1.5,\n    segments: 64\n  },\n  cube: {\n    size: 2,\n    segments: 2\n  },\n  torus: {\n    radius: 1.5,\n    tube: 0.4,\n    radialSegments: 16,\n    tubularSegments: 64\n  },\n  clickDetection: {\n    radius: 6 // Radius of invisible sphere for better click detection\n  }\n};\n\n// Scene element materials properties\nexport const MATERIALS = {\n  metalness: 0.7,\n  roughness: 0.2,\n  emissiveIntensity: 0.3,\n  hoverEmissiveIntensity: 0.6\n};\n\n// Limits for the number of shapes in each scene type\nexport const SHAPE_LIMITS = {\n  SPHERE: {\n    mobile: 25,  // Fewer shapes on mobile for better performance\n    desktop: 50  // More shapes on desktop for richer visuals\n  },\n  BOX: {\n    mobile: 20,\n    desktop: 40\n  },\n  TORUS: {\n    mobile: 20,\n    desktop: 40\n  }\n};\n\n// Create a named object for default export\nconst constants = {\n  SHAPE_TYPES,\n  CANVAS_SETTINGS,\n  PERFORMANCE_MODES,\n  ANIMATION,\n  DIMENSIONS,\n  MATERIALS,\n  SHAPE_LIMITS\n};\n\nexport default constants;\n","import React, { createContext, useContext, useState, useCallback, useRef } from 'react';\nimport { SHAPE_TYPES } from './constants';\n\n// Create context with default values\nconst SceneContext = createContext({\n  currentShapeType: SHAPE_TYPES.SPHERE,\n  switchShapeType: () => {},\n  isTransitioning: false,\n  showParticles: true,\n  toggleParticles: () => {},\n  mousePosition: { x: 0, y: 0 },\n  updateMousePosition: () => {},\n  isDragging: false,\n  updateDragging: () => {},\n  isInteractionEnabled: true,\n  setInteractionEnabled: () => {},\n  hasInteraction: false\n});\n\n/**\n * SceneProvider Component\n */\nexport const SceneProvider = ({ children }) => {\n  // Scene state\n  const [currentShapeType, setCurrentShapeType] = useState(SHAPE_TYPES.SPHERE);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  const [showParticles, setShowParticles] = useState(true);\n  \n  // Interaction state\n  const [isDragging, setIsDragging] = useState(false);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const [isInteractionEnabled, setIsInteractionEnabled] = useState(true);\n  const [hasInteraction, setHasInteraction] = useState(false);\n  \n  // Track last mouse activity time\n  const lastInteractionTime = useRef(Date.now());\n  const interactionTimeout = useRef(null);\n  \n  // Toggle particles\n  const toggleParticles = useCallback(() => {\n    setShowParticles(prev => !prev);\n  }, []);\n  \n  // Function to switch between scene types with smooth transition\n  const switchShapeType = useCallback(() => {\n    console.log(\"🔄 SceneContext: switchShapeType called, current state:\", {\n      currentShapeType,\n      isTransitioning\n    });\n    \n    // Don't switch during transition or if interaction is disabled\n    if (isTransitioning || !isInteractionEnabled) {\n      console.log(\"🔄 SceneContext: Ignoring switchShapeType - already in transition or interaction disabled\");\n      return;\n    }\n    \n    console.log(\"🔄 SceneContext: Starting transition\");\n    setIsTransitioning(true);\n    \n    // Delay actual shape change to allow for transition animation\n    setTimeout(() => {\n      const newType = (currentShapeType + 1) % 3;\n      console.log(`🔄 SceneContext: Changing shape type from ${currentShapeType} to ${newType}`);\n      setCurrentShapeType(newType);\n      \n      // Reset transitioning state after animation completes\n      setTimeout(() => {\n        console.log(\"🔄 SceneContext: Transition complete\");\n        setIsTransitioning(false);\n      }, 400); // Duration based on transition animation\n    }, 200);\n  }, [isTransitioning, currentShapeType, isInteractionEnabled]);\n\n  // Update mouse position for interactive elements\n  const updateMousePosition = useCallback((position) => {\n    if (position && typeof position.x === 'number' && typeof position.y === 'number') {\n      setMousePosition(position);\n      \n      // Update interaction state\n      setHasInteraction(true);\n      lastInteractionTime.current = Date.now();\n      \n      // Clear any existing timeout\n      if (interactionTimeout.current) {\n        clearTimeout(interactionTimeout.current);\n      }\n      \n      // Set timeout to detect when interaction stops\n      interactionTimeout.current = setTimeout(() => {\n        setHasInteraction(false);\n      }, 2000);\n    }\n  }, []);\n  \n  // Clean up on unmount\n  React.useEffect(() => {\n    return () => {\n      if (interactionTimeout.current) {\n        clearTimeout(interactionTimeout.current);\n      }\n    };\n  }, []);\n  \n  // Update dragging state\n  const updateDragging = useCallback((dragging) => {\n    setIsDragging(dragging);\n    \n    // Also consider this as interaction\n    if (dragging) {\n      setHasInteraction(true);\n      lastInteractionTime.current = Date.now();\n    }\n  }, []);\n  \n  // Toggle interaction enabled state\n  const setInteractionEnabled = useCallback((enabled) => {\n    setIsInteractionEnabled(enabled);\n  }, []);\n\n  return (\n    <SceneContext.Provider value={{ \n      currentShapeType, \n      switchShapeType, \n      isTransitioning,\n      showParticles,\n      toggleParticles,\n      mousePosition,\n      updateMousePosition,\n      isDragging,\n      updateDragging,\n      isInteractionEnabled,\n      setInteractionEnabled,\n      hasInteraction\n    }}>\n      {children}\n    </SceneContext.Provider>\n  );\n};\n\n// Custom hook to use the scene context\nexport const useSceneState = () => {\n  const context = useContext(SceneContext);\n  if (!context) {\n    throw new Error('useSceneState must be used within a SceneProvider');\n  }\n  return context;\n};\n\nexport default SceneContext;\n","import * as THREE from 'three';\nimport { SHAPE_TYPES } from '../constants';\n\n/**\n * Converts a hex color string to HSL color object\n * @param {string} hex - Hex color string\n * @returns {Object} HSL color object with h, s, l properties\n */\nexport const hexToHSL = (hex) => {\n  // Remove the # if present\n  hex = hex.replace('#', '');\n  \n  // Convert hex to RGB\n  const r = parseInt(hex.substr(0, 2), 16) / 255;\n  const g = parseInt(hex.substr(2, 2), 16) / 255;\n  const b = parseInt(hex.substr(4, 2), 16) / 255;\n  \n  // Find max and min values to calculate lightness\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  \n  let h, s;\n  \n  if (max === min) {\n    h = s = 0; // achromatic\n  } else {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    \n    switch (max) {\n      case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n      case g: h = (b - r) / d + 2; break;\n      case b: h = (r - g) / d + 4; break;\n      default: h = 0;\n    }\n    \n    h /= 6;\n  }\n  \n  return { h, s, l };\n};\n\n/**\n * Create a dynamic color based on theme, time, and energy level\n * @param {Object} theme - MUI theme object\n * @param {number} time - Current elapsed time\n * @param {number} energy - Energy/excitement level (0-1)\n * @param {number} sceneType - Type of scene (from SHAPE_TYPES)\n * @param {boolean} isHovered - Whether the object is hovered\n * @returns {Object} - Color object with main, emissive, and emissiveIntensity\n */\nexport const getDynamicColor = (theme, time, energy = 0, sceneType = SHAPE_TYPES.SPHERE, isHovered = false) => {\n  // Extract base colors from theme\n  const colors = extractThemeColors(theme).shapeColors;\n  \n  // Get base color for this shape type\n  const baseColor = colors[sceneType] || colors[SHAPE_TYPES.SPHERE];\n  const hoverColor = colors.hover;\n  \n  // Calculate hue shift based on time and energy\n  const timeShift = (time * 0.05) % 1.0;\n  const energyBoost = Math.min(1, energy * 1.2);\n  \n  // Calculate final color values with time and energy influences\n  let hue, saturation, lightness;\n  \n  if (isHovered) {\n    // Use hover color directly when hovered\n    hue = hoverColor.h;\n    saturation = hoverColor.s + (energy * 0.2);\n    lightness = hoverColor.l + (energy * 0.1);\n  } else {\n    // Shift colors based on energy level\n    const hueShift = energy * 0.2 * Math.sin(time * 2);\n    hue = (baseColor.h + hueShift + (energy * timeShift * 0.3)) % 1.0;\n    saturation = THREE.MathUtils.lerp(baseColor.s, 0.9, energy * 0.7);\n    lightness = THREE.MathUtils.lerp(baseColor.l, 0.6, energy * 0.5);\n  }\n  \n  // Create THREE.Color objects for both main color and emissive\n  const mainColor = new THREE.Color().setHSL(hue, saturation, lightness);\n  \n  // Emissive color is slightly shifted and brighter\n  const emissiveHue = (hue + 0.1) % 1.0;\n  const emissiveColor = new THREE.Color().setHSL(\n    emissiveHue, \n    Math.min(1, saturation + 0.1), \n    Math.min(0.8, lightness + 0.2)\n  );\n  \n  // Calculate emissive intensity based on energy\n  const emissiveIntensity = energyBoost * 0.8;\n  \n  return {\n    main: mainColor,\n    emissive: emissiveColor,\n    emissiveIntensity: emissiveIntensity\n  };\n};\n\n/**\n * Extract theme colors for Three.js scenes\n */\nexport const extractThemeColors = (theme) => {\n  if (!theme || !theme.palette) {\n    // Provide fallback colors if theme isn't available\n    return {\n      shapeColors: {\n        0: { h: 0.6, s: 0.6, l: 0.6 }, // Blue-ish\n        1: { h: 0.3, s: 0.6, l: 0.6 }, // Green-ish\n        2: { h: 0.1, s: 0.6, l: 0.6 }, // Orange-ish\n        hover: { h: 0.5, s: 0.8, l: 0.7 }\n      },\n      sceneColors: {\n        cubeGrid: {\n          primary: new THREE.Color('#5363EE'),\n          secondary: new THREE.Color('#C2F750'),\n          accent: new THREE.Color('#29b6f6')\n        },\n        torus: {\n          primary: '#5363EE',\n          secondary: '#C2F750',\n          trail: '#C2F750'\n        }\n      }\n    };\n  }\n\n  // First try to use dedicated scene3d colors if available in the theme\n  let primaryColor, secondaryColor, infoColor;\n  \n  if (theme.palette.scene3d) {\n    primaryColor = theme.palette.scene3d.sphere || theme.palette.primary?.main;\n    secondaryColor = theme.palette.scene3d.box || theme.palette.secondary?.main;\n    infoColor = theme.palette.scene3d.torus || theme.palette.info?.main;\n  } else {\n    // Fallback to standard theme colors\n    primaryColor = theme.palette.primary?.main;\n    secondaryColor = theme.palette.secondary?.main;\n    infoColor = theme.palette.info?.main;\n  }\n  \n  // Extract colors from theme, using fallbacks if needed\n  const primary = hexToHSL(primaryColor || '#5363EE');\n  const secondary = hexToHSL(secondaryColor || '#C2F750');\n  const info = hexToHSL(infoColor || '#29b6f6');\n  \n  // Base scene color mapping\n  const shapeColors = {\n    [SHAPE_TYPES.SPHERE]: primary,\n    [SHAPE_TYPES.BOX]: secondary,\n    [SHAPE_TYPES.TORUS]: info,\n    hover: hexToHSL(theme.palette.secondary?.light || '#D4FF69'),\n  };\n  \n  // Additional colors for other scenes\n  const sceneColors = {\n    cubeGrid: {\n      primary: new THREE.Color(theme.palette.primary?.main || '#5363EE'),\n      secondary: new THREE.Color(theme.palette.secondary?.main || '#C2F750'),\n      accent: new THREE.Color(theme.palette.info?.main || '#29b6f6'),\n    },\n    torus: {\n      primary: theme.palette.primary?.main || '#5363EE',\n      secondary: theme.palette.secondary?.main || '#C2F750',\n      trail: theme.palette.secondary?.main || '#C2F750'\n    }\n  };\n  \n  return { shapeColors, sceneColors };\n};\n\n// Add direct alias for backward compatibility\nexport const extractColorsFromTheme = extractThemeColors;\n\n/**\n * Convert MUI theme color to THREE.js color\n */\nexport const themeColorToThreeColor = (colorString) => {\n  return new THREE.Color(colorString);\n};\n\n// Get environment settings based on theme\nexport const getEnvironmentSettings = (theme) => {\n  const isDark = theme.palette.mode === 'dark';\n  \n  return {\n    fogColor: isDark ? 0x0a1022 : 0xf0f4f8,\n    fogDensity: isDark ? 0.02 : 0.01,\n    ambientLight: {\n      color: isDark ? 0x333344 : 0xffffff,\n      intensity: isDark ? 0.7 : 0.5\n    },\n    directionalLight: {\n      color: isDark ? 0xaabbff : 0xffffff,\n      intensity: isDark ? 0.8 : 1.0\n    },\n    backgroundColor: isDark ? 0x0a1022 : 0xf0f4f8\n  };\n};\n","/**\n * ObjectPool\n * \n * A utility for reusing Three.js objects to improve performance\n * and reduce garbage collection pauses\n */\n\nclass ObjectPool {\n  constructor(factory, initialSize = 50) {\n    this.factory = factory;\n    this.pool = [];\n    this.activeObjects = new Set();\n    \n    // Pre-populate the pool\n    this.expand(initialSize);\n  }\n  \n  // Get an object from the pool or create a new one\n  get() {\n    let object;\n    \n    if (this.pool.length > 0) {\n      object = this.pool.pop();\n    } else {\n      object = this.factory();\n    }\n    \n    this.activeObjects.add(object);\n    return object;\n  }\n  \n  // Return an object to the pool\n  release(object) {\n    if (this.activeObjects.has(object)) {\n      this.activeObjects.delete(object);\n      this.pool.push(object);\n    }\n  }\n  \n  // Add more objects to the pool\n  expand(count) {\n    for (let i = 0; i < count; i++) {\n      this.pool.push(this.factory());\n    }\n  }\n  \n  // Clear the pool\n  clear() {\n    this.pool = [];\n    this.activeObjects.clear();\n  }\n  \n  // Get the number of objects in the pool\n  get size() {\n    return this.pool.length;\n  }\n  \n  // Get the number of active objects\n  get activeCount() {\n    return this.activeObjects.size;\n  }\n  \n  // Get total objects (active + pooled)\n  get totalCount() {\n    return this.pool.length + this.activeObjects.size;\n  }\n}\n\nexport default ObjectPool;\n","import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\nimport { useTheme, useMediaQuery } from '@mui/material';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { SHAPE_LIMITS, SHAPE_TYPES } from '../constants';\nimport { useSceneState } from '../SceneContext';\nimport ObjectPool from '../utils/ObjectPool';\nimport { getDynamicColor, themeColorToThreeColor } from '../utils/sceneThemeUtils';\n\n/**\n * SphereScene Component - Enhanced with camera-aware mouse following\n */\nconst SphereScene = ({ \n  color = new THREE.Color(), // Will be overridden by theme-derived colors\n  mousePosition, \n  mouseData, \n  isTransitioning, \n  easterEggActive = false,\n  interactionCount = 0\n}) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const { isInteractionEnabled } = useSceneState();\n  \n  // Set up pools of shapes for reuse\n  const [shapesPool] = useState(() => \n    new ObjectPool(() => ({ \n      position: new THREE.Vector3(), \n      velocity: new THREE.Vector3(),\n      rotation: new THREE.Euler(),\n      scale: new THREE.Vector3(1, 1, 1),\n      type: SHAPE_TYPES.SPHERE,\n      hovered: false,\n      excitementLevel: 0,\n      ref: React.createRef(),\n      matrixAutoUpdate: false,\n      // Auto-movement properties\n      autoMovement: {\n        speed: Math.random() * 0.005 + 0.001,\n        direction: new THREE.Vector3(\n          Math.random() * 2 - 1,\n          Math.random() * 2 - 1,\n          Math.random() * 2 - 1\n        ).normalize(),\n        rotationSpeed: {\n          x: Math.random() * 0.005,\n          y: Math.random() * 0.005,\n          z: Math.random() * 0.005\n        },\n        timeOffset: Math.random() * 1000\n      },\n      // Tracking last position for velocity smoothing\n      lastPosition: new THREE.Vector3()\n    }), isMobile ? SHAPE_LIMITS.SPHERE.mobile : SHAPE_LIMITS.SPHERE.desktop)\n  );\n  \n  // Store active shapes\n  const [activeShapes, setActiveShapes] = useState([]);\n  \n  // Track if the cursor has moved recently\n  const hasMouseMoved = useRef(false);\n  const lastMouseMoveTime = useRef(0);\n  \n  // Use a bias vector to maintain a direction of movement\n  const movementBias = useRef(new THREE.Vector3());\n  \n  // User's cursor position in 3D space\n  const cursorPosition = useRef(new THREE.Vector3());\n  const prevCursorPosition = useRef(new THREE.Vector3());\n  \n  // Reusable vectors for calculations\n  const tempVector = useRef(new THREE.Vector3());\n  const tempVector2 = useRef(new THREE.Vector3());\n  \n  // Clock for time-based animations\n  const clock = useRef(new THREE.Clock()).current;\n\n  // Get theme colors for each shape\n  const shapeColors = useMemo(() => {\n    // Helper to convert hex to HSL\n    const hexToHSL = (hex) => {\n      hex = hex.replace('#', '');\n      \n      const r = parseInt(hex.substr(0, 2), 16) / 255;\n      const g = parseInt(hex.substr(2, 2), 16) / 255;\n      const b = parseInt(hex.substr(4, 2), 16) / 255;\n      \n      const max = Math.max(r, g, b);\n      const min = Math.min(r, g, b);\n      const l = (max + min) / 2;\n      \n      let h, s;\n      \n      if (max === min) {\n        h = s = 0; // achromatic\n      } else {\n        const d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        \n        switch (max) {\n          case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n          case g: h = (b - r) / d + 2; break;\n          case b: h = (r - g) / d + 4; break;\n          default: h = 0;\n        }\n        \n        h /= 6;\n      }\n      \n      return { h, s, l };\n    };\n    \n    // Extract colors from theme\n    const primary = hexToHSL(theme.palette.primary.main);\n    const secondary = hexToHSL(theme.palette.secondary.main);\n    const info = hexToHSL(theme.palette.info?.main || '#29b6f6');\n    \n    return {\n      [SHAPE_TYPES.SPHERE]: primary,\n      [SHAPE_TYPES.BOX]: secondary,\n      [SHAPE_TYPES.TORUS]: info,\n      hover: hexToHSL(theme.palette.secondary.light), // Hover state color\n    };\n  }, [theme.palette]);\n\n  // Get theme colors for each shape - Use this directly in the dynamic color logic\n  const getShapeColor = useCallback((shapeType, isHovered = false) => {\n    // Extract the proper color for the shape type from theme\n    const hslColor = isHovered ? \n      shapeColors.hover : \n      shapeColors[shapeType] || shapeColors[SHAPE_TYPES.SPHERE];\n      \n    // Create a new THREE.Color and set HSL values\n    return new THREE.Color().setHSL(\n      hslColor.h,\n      hslColor.s,\n      hslColor.l\n    );\n  }, [shapeColors]);\n  \n  // Initialize the shapes\n  useEffect(() => {\n    const count = isMobile ? SHAPE_LIMITS.SPHERE.mobile : SHAPE_LIMITS.SPHERE.desktop;\n    const nextActiveShapes = [];\n    \n    for (let i = 0; i < count; i++) {\n      const shape = shapesPool.get();\n      if (shape) {\n        // Random starting position with better distribution\n        const radius = 4 + Math.random() * 3; // Distribute in a shell between radius 4 and 7\n        const theta = Math.random() * Math.PI * 2;\n        const phi = Math.acos(2 * Math.random() - 1);\n        \n        shape.position.set(\n          radius * Math.sin(phi) * Math.cos(theta),\n          radius * Math.sin(phi) * Math.sin(theta),\n          radius * Math.cos(phi)\n        );\n        \n        // Random initial velocity (very small to start)\n        shape.velocity.set(\n          THREE.MathUtils.randFloat(-0.002, 0.002),\n          THREE.MathUtils.randFloat(-0.002, 0.002),\n          THREE.MathUtils.randFloat(-0.002, 0.002)\n        );\n        \n        // Save initial position for reference\n        shape.lastPosition.copy(shape.position);\n        \n        // Random rotation\n        shape.rotation.set(\n          THREE.MathUtils.randFloat(0, Math.PI * 2),\n          THREE.MathUtils.randFloat(0, Math.PI * 2),\n          THREE.MathUtils.randFloat(0, Math.PI * 2)\n        );\n        \n        shape.type = SHAPE_TYPES.SPHERE;\n        shape.hovered = false;\n        shape.excitementLevel = 0;\n        shape.scale.set(1, 1, 1);\n        \n        // Reset auto-movement properties with varied parameters\n        shape.autoMovement = {\n          speed: Math.random() * 0.004 + 0.001,\n          direction: new THREE.Vector3(\n            Math.random() * 2 - 1,\n            Math.random() * 2 - 1,\n            Math.random() * 2 - 1\n          ).normalize(),\n          rotationSpeed: {\n            x: Math.random() * 0.005,\n            y: Math.random() * 0.005,\n            z: Math.random() * 0.005\n          },\n          timeOffset: Math.random() * 1000\n        };\n        \n        nextActiveShapes.push(shape);\n      }\n    }\n    \n    setActiveShapes(nextActiveShapes);\n    \n    return () => {\n      nextActiveShapes.forEach(shape => {\n        shapesPool.release(shape);\n      });\n    };\n  }, [isMobile, shapesPool]);\n  \n  // Update cursor position from mouseData prop (world coordinates)\n  useEffect(() => {\n    // If we have the new mouseData with world coordinates, use that\n    if (mouseData && mouseData.world) {\n      // Use the world position directly since it's already in 3D space\n      cursorPosition.current.copy(mouseData.world);\n      \n      // Set movement bias from world velocity if available\n      if (mouseData.velocity) {\n        const velocityLength = mouseData.velocity.length();\n        if (velocityLength > 0.001) {\n          // Create a normalized direction vector from velocity\n          movementBias.current.copy(mouseData.velocity).normalize();\n          hasMouseMoved.current = true;\n          lastMouseMoveTime.current = clock.getElapsedTime();\n        }\n      }\n    } \n    // Fallback to old method if we don't have world coordinates\n    else if (mousePosition) {\n      // Store previous position before updating\n      prevCursorPosition.current.copy(cursorPosition.current);\n      \n      // Convert screen coordinates to world space\n      cursorPosition.current.set(\n        mousePosition.x * 8,\n        mousePosition.y * 8,\n        0\n      );\n      \n      // Calculate cursor movement for momentum\n      tempVector.current.subVectors(cursorPosition.current, prevCursorPosition.current);\n      \n      // Update bias when there's significant movement\n      if (tempVector.current.lengthSq() > 0.001) {\n        movementBias.current.copy(tempVector.current).normalize();\n        hasMouseMoved.current = true;\n        lastMouseMoveTime.current = clock.getElapsedTime();\n      }\n    }\n  }, [mousePosition, mouseData, clock]);\n  \n  // Add cursor direction tracking for color mapping\n  const cursorDirection = useRef({ angle: 0, hue: 0 });\n  const prevCursorWorldPos = useRef(new THREE.Vector3());\n  \n  // Update cursor direction for hue mapping\n  const updateCursorDirection = useCallback((currentPos) => {\n    if (!currentPos) return;\n    \n    // Calculate direction vector (dx, dy)\n    const dx = currentPos.x - prevCursorWorldPos.current.x;\n    const dy = currentPos.y - prevCursorWorldPos.current.y;\n    \n    // Only update if there's significant movement\n    if (dx*dx + dy*dy > 0.001) {\n      // Convert direction to angle using atan2\n      const angle = Math.atan2(dy, dx);\n      \n      // Map angle (-π to π) to hue (0 to 1)\n      // Add 0.5 to the normalized value to create more pleasing colors (shift to greens/blues)\n      const hue = ((angle / (Math.PI * 2)) + 0.5) % 1;\n      \n      // Store direction data\n      cursorDirection.current = { angle, hue, intensity: Math.min(1, Math.sqrt(dx*dx + dy*dy) * 3) };\n      \n      // Store position for next frame\n      prevCursorWorldPos.current.copy(currentPos);\n    } else {\n      // Gradually reduce intensity when not moving\n      cursorDirection.current.intensity = Math.max(0, cursorDirection.current.intensity - 0.02);\n    }\n  }, []);\n  \n  // Animation and physics logic with optimizations\n  useFrame(() => {\n    if (isTransitioning) return;\n    \n    const currentTime = clock.getElapsedTime();\n    const timeSinceLastMove = currentTime - lastMouseMoveTime.current;\n    \n    // Update cursor direction for hue mapping\n    if (mouseData?.world) {\n      updateCursorDirection(mouseData.world);\n    } else if (mousePosition) {\n      // Convert screen coordinates to world coordinates\n      const worldPos = new THREE.Vector3(mousePosition.x * 8, mousePosition.y * 8, 0);\n      updateCursorDirection(worldPos);\n    }\n    \n    // Reset mouse movement flag after 0.5 seconds of no movement\n    if (hasMouseMoved.current && timeSinceLastMove > 0.5) {\n      hasMouseMoved.current = false;\n    }\n    \n    // Fun Mode Special Effects - activate when Easter egg is triggered\n    const funModeActive = easterEggActive;\n    const funModeInfluence = funModeActive ? Math.sin(currentTime * 4) * 0.5 + 0.5 : 0;\n    \n    // Get the directional hue for color syncing\n    const directionHue = cursorDirection.current.hue;\n    const directionIntensity = cursorDirection.current.intensity;\n    \n    // Keep track of spheres that are interacting with cursor for spread calculations\n    const interactingSpheres = [];\n    \n    // First pass: Update basic physics and collect interacting spheres\n    activeShapes.forEach((shape, index) => {\n      // Save last position for later reference\n      shape.lastPosition.copy(shape.position);\n      \n      // AUTOMATIC MOTION: More subtle when cursor is active\n      const autoMove = shape.autoMovement;\n      const autoInfluence = hasMouseMoved.current ? 0.3 : 1.0; // Reduce auto-motion when cursor is active\n      \n      // Enhanced fun mode behaviors - now properly using funModeInfluence\n      if (funModeActive) {\n        // Apply funModeInfluence to create pulsating color and size effects\n        const pulseFrequency = 2.0 + funModeInfluence * 4.0; // Faster pulse with higher influence\n        const pulseAmplitude = 0.4 * (0.5 + funModeInfluence); // Stronger pulse with higher influence\n        const pulsePhase = (index / activeShapes.length) * Math.PI * 2;\n        const pulseFactor = Math.sin(currentTime * pulseFrequency + pulsePhase) * pulseAmplitude + 1.0;\n        \n        // Apply scale pulsing with funModeInfluence for added excitement\n        shape.scale.set(\n          pulseFactor * (1 + funModeInfluence * 0.2),\n          pulseFactor * (1 + funModeInfluence * 0.2),\n          pulseFactor * (1 + funModeInfluence * 0.2)\n        );\n        \n        // Make spheres orbit center with funModeInfluence affecting orbit speed\n        if (shape.excitementLevel > 0.5 || funModeInfluence > 0.7) {\n          const orbitRadius = 4 + funModeInfluence * 2; // Larger orbit with higher influence\n          const orbitSpeed = (0.5 + shape.excitementLevel) * (1 + funModeInfluence);\n          const uniqueOffset = index * 0.628; // Distribute evenly, approx 2π/10\n          \n          // Create swirling orbit motion with funModeInfluence affecting pattern\n          const orbitX = Math.cos(currentTime * orbitSpeed + uniqueOffset) * orbitRadius;\n          const orbitY = Math.sin(currentTime * orbitSpeed + uniqueOffset) * orbitRadius;\n          const orbitZ = Math.cos(currentTime * orbitSpeed * 0.5 + uniqueOffset * funModeInfluence) * orbitRadius;\n          \n          // Apply a force toward the orbit position - stronger with funModeInfluence\n          const orbitForce = new THREE.Vector3(orbitX, orbitY, orbitZ)\n            .sub(shape.position)\n            .multiplyScalar(0.01 * (1 + funModeInfluence));\n            \n          shape.velocity.add(orbitForce);\n          \n          // Add a funModeInfluence-based rotation boost\n          shape.rotation.x += autoMove.rotationSpeed.x * funModeInfluence * 2;\n          shape.rotation.y += autoMove.rotationSpeed.y * funModeInfluence * 2;\n        }\n      } else {\n        // Regular auto-movement when not in fun mode\n        // Time-based influence for more dynamic movement\n        const timeInfluence = Math.sin(currentTime + autoMove.timeOffset) * 0.5 + 0.5;\n        const autoVelocity = tempVector2.current.copy(autoMove.direction)\n          .multiplyScalar(autoMove.speed * timeInfluence * autoInfluence);\n        \n        // Add auto-movement to regular velocity - less when cursor is active\n        tempVector.current.copy(shape.velocity).add(autoVelocity);\n        shape.position.add(tempVector.current);\n      }\n      \n      // Auto-rotation with enhanced speed in fun mode\n      const rotationMultiplier = funModeActive ? 2.5 : 1.2;\n      shape.rotation.x += autoMove.rotationSpeed.x * rotationMultiplier;\n      shape.rotation.y += autoMove.rotationSpeed.y * rotationMultiplier;\n      shape.rotation.z += autoMove.rotationSpeed.z * rotationMultiplier;\n      \n      // Bounce off boundaries with a soft approach\n      ['x', 'y', 'z'].forEach(axis => {\n        const limit = 8; // Expanded from 5 to 8\n        const position = shape.position[axis];\n        const absPosition = Math.abs(position);\n        \n        // Soft boundary - start pushing back before hitting hard limit\n        if (absPosition > limit - 1) {\n          // Soft force pushing back toward center\n          const pushbackForce = (absPosition - (limit - 1)) * 0.01 * Math.sign(position);\n          shape.velocity[axis] -= pushbackForce;\n          \n          // Hard boundary - bounce\n          if (absPosition > limit) {\n            shape.velocity[axis] *= -0.8; // Bounce with energy loss\n            shape.position[axis] = limit * Math.sign(position) * 0.95; // Pull slightly in from edge\n            autoMove.direction[axis] *= -1; // Reverse auto-movement direction\n          }\n        }\n      });\n      \n      // Mouse interaction - NOW USING WORLD COORDINATES\n      if ((mouseData?.world || mousePosition) && isInteractionEnabled && !isTransitioning) {\n        // Calculate distance to cursor in world space\n        tempVector.current.copy(shape.position);\n        const distToCursor = tempVector.current.distanceTo(cursorPosition.current);\n        const interactionRadius = 5; // Increased from 3\n        \n        if (distToCursor < interactionRadius) {\n          // Track this sphere for spread calculations\n          interactingSpheres.push(shape);\n          \n          // Calculate interaction strength based on distance\n          const strength = 1 - (distToCursor / interactionRadius);\n          \n          // ENHANCED CURSOR FOLLOWING:\n          \n          // 1. Attraction force - stronger when further away\n          const attractionStrength = strength * 0.015; // Increased from 0.005\n          tempVector.current.subVectors(cursorPosition.current, shape.position)\n            .normalize()\n            .multiplyScalar(attractionStrength);\n          \n          shape.velocity.add(tempVector.current);\n          \n          // 2. Add cursor momentum influence for more dynamic following\n          if (hasMouseMoved.current) {\n            // Add a bias in the direction the cursor is moving\n            shape.velocity.add(\n              movementBias.current.clone().multiplyScalar(0.002 * strength)\n            );\n          }\n          \n          // 3. Prevent bunching: Add repulsion when very close to cursor\n          if (distToCursor < 0.8) {\n            // Close to cursor - add repulsive force to prevent bunching\n            const repulsionStrength = (1 - distToCursor / 0.8) * 0.01;\n            tempVector.current.subVectors(shape.position, cursorPosition.current)\n              .normalize()\n              .multiplyScalar(repulsionStrength);\n            \n            shape.velocity.add(tempVector.current);\n          }\n          \n          // Increase excitement level (affects color and glow)\n          shape.excitementLevel = Math.min(1, shape.excitementLevel + 0.025); // Increased from 0.015\n        } else {\n          // Reset when away from cursor - gentler decay\n          shape.excitementLevel = Math.max(0, shape.excitementLevel - 0.008);\n        }\n      } else {\n        // Gradually reduce excitement when no mouse interaction\n        shape.excitementLevel = Math.max(0, shape.excitementLevel - 0.008);\n      }\n      \n      // Update color based on energy and mode\n      if (shape.ref.current && shape.ref.current.material) {\n        // Override with rainbow colors in Easter egg mode\n        if (easterEggActive) {\n          const hue = ((currentTime * 0.2) + (index * 0.01)) % 1.0;\n          shape.ref.current.material.color.setHSL(hue, 0.8, 0.5);\n          shape.ref.current.material.emissive.setHSL(hue, 0.9, 0.3);\n          shape.ref.current.material.emissiveIntensity = 0.5;\n        } else {\n          // Apply theme-derived colors - Now using getShapeColor for base materials when inactive\n          if (shape.excitementLevel < 0.1) {\n            // Use simpler color for inactive states to improve performance\n            shape.ref.current.material.color = getShapeColor(SHAPE_TYPES.SPHERE, shape.hovered);\n            shape.ref.current.material.emissive = getShapeColor(SHAPE_TYPES.SPHERE, false).multiplyScalar(0.2);\n            shape.ref.current.material.emissiveIntensity = 0.1;\n          } else {\n            // Use dynamic colors with directional hue influence for active/excited states\n            const dynamicColors = getDynamicColor(\n              theme,\n              currentTime + (index * 0.05), \n              shape.excitementLevel,\n              SHAPE_TYPES.SPHERE,\n              shape.hovered\n            );\n            \n            // Apply base dynamic colors\n            shape.ref.current.material.color.copy(dynamicColors.main);\n            shape.ref.current.material.emissive.copy(dynamicColors.emissive);\n            shape.ref.current.material.emissiveIntensity = dynamicColors.emissiveIntensity;\n            \n            // Blend in direction-based hue for excited spheres\n            if (directionIntensity > 0.1 && hasMouseMoved.current) {\n              // Create direction-influenced color\n              const dirColor = new THREE.Color().setHSL(\n                directionHue,\n                0.8,\n                0.5 + shape.excitementLevel * 0.2\n              );\n              \n              // Blend between regular color and direction color based on intensity and excitement\n              const blendFactor = directionIntensity * shape.excitementLevel * 0.7;\n              shape.ref.current.material.color.lerp(dirColor, blendFactor);\n              \n              // Also influence emissive color\n              const emissiveDir = new THREE.Color().setHSL(\n                (directionHue + 0.1) % 1.0,\n                0.9,\n                0.4\n              );\n              shape.ref.current.material.emissive.lerp(emissiveDir, blendFactor);\n              \n              // Boost emissive intensity with direction intensity\n              shape.ref.current.material.emissiveIntensity += directionIntensity * 0.3 * shape.excitementLevel;\n            }\n          }\n        }\n        \n        shape.ref.current.material.needsUpdate = true;\n      }\n    });\n    \n    // Second pass: Apply sphere-to-sphere repulsion to prevent bunching\n    // Only do this when there are multiple spheres interacting with cursor\n    if (interactingSpheres.length > 1) {\n      for (let i = 0; i < interactingSpheres.length; i++) {\n        const sphere1 = interactingSpheres[i];\n        \n        for (let j = i + 1; j < interactingSpheres.length; j++) {\n          const sphere2 = interactingSpheres[j];\n          \n          // Calculate distance between spheres\n          tempVector.current.subVectors(sphere1.position, sphere2.position);\n          const distanceSq = tempVector.current.lengthSq();\n          \n          // Apply repulsion if spheres are too close (for better distribution)\n          if (distanceSq < 0.3) {\n            const repulsionForce = 0.002 / Math.max(0.05, distanceSq);\n            const forceVector = tempVector.current.normalize().multiplyScalar(repulsionForce);\n            \n            // Apply opposing forces to both spheres\n            sphere1.velocity.add(forceVector);\n            sphere2.velocity.sub(forceVector);\n          }\n        }\n      }\n    }\n    \n    // Third pass: Final velocity processing and visual updates\n    activeShapes.forEach(shape => {\n      // Limit velocity with higher maximum for better responsiveness\n      const maxSpeed = 0.04; // Increased from 0.02\n      if (shape.velocity.length() > maxSpeed) {\n        shape.velocity.normalize().multiplyScalar(maxSpeed);\n      }\n      \n      // Less damping for more persistent movement\n      shape.velocity.multiplyScalar(0.98); // Changed from 0.97\n      \n      // Update the actual mesh visual elements\n      if (shape.ref.current) {\n        // Position and rotation updates\n        shape.ref.current.position.copy(shape.position);\n        shape.ref.current.rotation.copy(shape.rotation);\n        \n        // Scale based on excitement and velocity\n        const speedFactor = shape.velocity.length() * 10;\n        const scaleFactor = 1 + (shape.excitementLevel * 0.2) + (speedFactor * 0.1);\n        shape.scale.set(scaleFactor, scaleFactor, scaleFactor);\n        shape.ref.current.scale.copy(shape.scale);\n        \n        // Manually update matrix for better performance \n        shape.ref.current.updateMatrix();\n      }\n    });\n  });\n\n  return (\n    <>\n      {/* Add particle burst effect when in fun mode */}\n      {easterEggActive && (\n        <pointLight\n          position={[0, 0, 0]}\n          distance={10}\n          intensity={3}\n          color={new THREE.Color().setHSL(\n            (clock.getElapsedTime() * 0.1) % 1, \n            0.8, \n            0.6\n          )}\n        />\n      )}\n      \n      {activeShapes.map((shape, i) => {\n        // Get initial colors from theme\n        const baseColor = themeColorToThreeColor(theme.palette.primary.main);\n        const emissiveColor = themeColorToThreeColor(theme.palette.primary.light);\n        \n        return (\n          <mesh\n            key={i}\n            ref={shape.ref}\n            position={shape.position}\n            onPointerOver={() => { shape.hovered = true; }}\n            onPointerOut={() => { shape.hovered = false; }}\n            matrixAutoUpdate={false}\n          >\n            <sphereGeometry args={[0.2, 16, 16]} />\n            <meshStandardMaterial\n              color={baseColor}\n              emissive={emissiveColor}\n              emissiveIntensity={0.2}\n              metalness={0.2}\n              roughness={0.7}\n            />\n          </mesh>\n        );\n      })}\n    </>\n  );\n};\n\nexport default SphereScene;\n","import React, { useRef, useMemo, useEffect } from 'react';\nimport { useTheme, useMediaQuery } from '@mui/material';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { useSceneState } from '../SceneContext';\nimport { getDynamicColor, themeColorToThreeColor } from '../utils/sceneThemeUtils';\nimport { SHAPE_TYPES } from '../constants';\n\n/**\n * BoxScene Component - Enhanced with automatic motion and better mouse tracking\n * \n * Creates an interactive 3D grid of cubes that:\n * - Responds to mouse movement with a ripple effect\n * - Features automatic wave motion when not interacted with\n * - Changes colors based on energy/activation levels\n */\nconst BoxScene = ({ \n  color = new THREE.Color(0x6366F1), // Default fallback, but we'll use theme-derived colors\n  mousePosition, \n  mouseData,\n  isTransitioning,\n  easterEggActive = false,\n  interactionCount = 0\n}) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const { clock } = useThree();\n  const { isInteractionEnabled, hasInteraction } = useSceneState();\n  \n  // Number of cubes in the grid\n  const gridSize = isMobile ? 5 : 8;\n  \n  // Cube references and state\n  const cubeRefs = useRef([]);\n  const cubeStates = useRef([]);\n  \n  // Track cursor position in world space\n  const cursorWorldPosition = useMemo(() => {\n    // Use mouseData.world if available for more accurate positioning\n    if (mouseData && mouseData.world) {\n      return {\n        x: mouseData.world.x * 2, // Scale to match grid size\n        z: -mouseData.world.z * 2  // Flip Z for proper orientation\n      };\n    }\n    // Fallback to normalized position\n    if (!mousePosition) return { x: 0, z: 0 };\n    return {\n      x: mousePosition.x * 5,\n      z: -mousePosition.y * 5\n    };\n  }, [mousePosition, mouseData]);\n\n  // Track previous cursor position for movement detection\n  const prevCursorPosition = useRef({ x: 0, z: 0 });\n  const hasCursorMoved = useRef(false);\n  const lastCursorMoveTime = useRef(0);\n  \n  // Initialize cube grid\n  const cubeGrid = useMemo(() => {\n    const grid = [];\n    const spacing = 1.0;\n    const offset = ((gridSize - 1) * spacing) / 2;\n    \n    cubeRefs.current = [];\n    cubeStates.current = [];\n    \n    for (let x = 0; x < gridSize; x++) {\n      for (let z = 0; z < gridSize; z++) {\n        const index = x * gridSize + z;\n        const xPos = (x * spacing) - offset;\n        const zPos = (z * spacing) - offset;\n        \n        grid.push({\n          index,\n          position: new THREE.Vector3(xPos, 0, zPos)\n        });\n        \n        cubeRefs.current[index] = React.createRef();\n        cubeStates.current[index] = {\n          targetY: 0,\n          currentY: 0,\n          energy: 0,\n          lastActive: 0,\n          // Add properties for automatic motion\n          autoMovement: {\n            phase: Math.random() * Math.PI * 2, // Random starting phase\n            speed: 0.5 + Math.random() * 0.5,  // Random wave speed\n            amplitude: 0.1 + Math.random() * 0.3 // Random height\n          }\n        };\n      }\n    }\n    \n    return grid;\n  }, [gridSize]);\n  \n  // Add ref for wave origin point\n  const waveOrigin = useRef(new THREE.Vector2(0, 0));\n  const waveActive = useRef(false);\n  const waveTime = useRef(0);\n  \n  // Trigger a wave effect occasionally\n  useEffect(() => {\n    if (easterEggActive) {\n      // Generate random wave origin\n      waveOrigin.current.set(\n        (Math.random() * 2 - 1) * 3,\n        (Math.random() * 2 - 1) * 3\n      );\n      waveActive.current = true;\n      waveTime.current = 0;\n      \n      // Disable wave after a few seconds\n      const timer = setTimeout(() => {\n        waveActive.current = false;\n      }, 4000);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [easterEggActive, interactionCount]);\n  \n  // Animation logic for cubes with enhanced mouse interaction\n  useFrame(() => {\n    if (isTransitioning) return;\n    \n    const currentTime = clock.getElapsedTime();\n    \n    // Initialize ripple variables at the beginning of the function\n    let rippleCenter = null;\n    let rippleStrength = Math.sin(currentTime * 3) * 0.5;\n    \n    // Track cursor movement\n    if (cursorWorldPosition) {\n      const distMoved = Math.sqrt(\n        Math.pow(cursorWorldPosition.x - prevCursorPosition.current.x, 2) +\n        Math.pow(cursorWorldPosition.z - prevCursorPosition.current.z, 2)\n      );\n      \n      if (distMoved > 0.05) {\n        hasCursorMoved.current = true;\n        lastCursorMoveTime.current = currentTime;\n        \n        // Create a ripple at cursor position when moving\n        rippleCenter = {\n          x: cursorWorldPosition.x,\n          z: cursorWorldPosition.z\n        };\n        rippleStrength = 0.6; // Reduced from 0.8 for a smaller effect\n        \n        // Update previous position\n        prevCursorPosition.current = {...cursorWorldPosition};\n      } else if (currentTime - lastCursorMoveTime.current > 0.3) {\n        hasCursorMoved.current = false;\n      }\n    }\n    \n    // Increment wave time if active\n    if (waveActive.current) {\n      waveTime.current += 0.05;\n    }\n    \n    // Create cursor-based ripples when cursor moves\n    if (hasCursorMoved.current && isInteractionEnabled) {\n      rippleCenter = {\n        x: cursorWorldPosition.x,\n        z: cursorWorldPosition.z\n      };\n      rippleStrength = 0.6; // Reduced strength for smaller effect\n    }\n    // Create automatic ripples occasionally\n    else if (easterEggActive || (currentTime % 10 < 0.1 && !hasInteraction)) {\n      // Random ripple center\n      rippleCenter = {\n        x: (Math.random() * 2 - 1) * (gridSize * 0.4), // Reduced area\n        z: (Math.random() * 2 - 1) * (gridSize * 0.4)  // Reduced area\n      };\n      rippleStrength = 0.6; // Reduced from 0.8\n    }\n    \n    // Update each cube\n    cubeGrid.forEach((cube) => {\n      const cubeRef = cubeRefs.current[cube.index];\n      const state = cubeStates.current[cube.index];\n      \n      if (!cubeRef.current) return;\n      \n      // Calculate heightmap from various influences\n      let finalHeight = 0;\n      \n      // 1. Basic sine wave pattern\n      const autoHeight = Math.sin(currentTime * state.autoMovement.speed + state.autoMovement.phase + cube.position.x + cube.position.z) * state.autoMovement.amplitude;\n      finalHeight += autoHeight;\n      \n      // 2. Mouse/cursor influence - reduce the influence radius\n      if (mousePosition && isInteractionEnabled) {\n        const dist = Math.sqrt(\n          Math.pow(cube.position.x - cursorWorldPosition.x, 2) + \n          Math.pow(cube.position.z - cursorWorldPosition.z, 2)\n        );\n        \n        // Reduced interaction radius from 3 to 2.2\n        if (dist < 2.2) {\n          // Stronger falloff for more localized effect\n          const strength = Math.pow(1 - Math.min(1, dist / 2.2), 1.5);\n          finalHeight += 1.3 * strength;\n          state.energy = Math.min(1, state.energy + 0.1);\n          state.lastActive = currentTime;\n        }\n      }\n      \n      // 3. Apply ripple effect with improved parameters\n      if (rippleCenter) {\n        const rippleDist = Math.sqrt(\n          Math.pow(cube.position.x - rippleCenter.x, 2) + \n          Math.pow(cube.position.z - rippleCenter.z, 2)\n        );\n        \n        // Smaller ripple effect radius\n        const waveFrequency = 2.5; // Increased from 2.0 for tighter waves\n        const maxRippleDistance = gridSize * 0.5; // Reduced from 0.7\n        \n        if (rippleDist < maxRippleDistance) {\n          // Calculate ripple wave effect\n          const ripplePhase = rippleDist * waveFrequency - currentTime * 6;\n          const rippleEffect = Math.sin(ripplePhase) * rippleStrength * \n                               Math.pow(1 - rippleDist / maxRippleDistance, 1.2); // Added power for sharper falloff\n          \n          finalHeight += rippleEffect;\n          \n          // Add energy based on ripple for visual effects\n          if (rippleEffect > 0.1) {\n            state.energy = Math.max(state.energy, rippleEffect * 0.5);\n          }\n        }\n      }\n      \n      // 4. Easter egg wave effect\n      if (waveActive.current && waveTime.current < 8) {\n        const distFromWave = Math.sqrt(\n          Math.pow(cube.position.x - waveOrigin.current.x, 2) + \n          Math.pow(cube.position.z - waveOrigin.current.y, 2)\n        );\n        \n        // Create an expanding circular wave\n        const waveRadius = waveTime.current * 1.2;\n        const waveWidth = 1.0;\n        const distFromWaveEdge = Math.abs(distFromWave - waveRadius);\n        \n        if (distFromWaveEdge < waveWidth) {\n          // Cube is in the wave front\n          const waveIntensity = 1.0 - (distFromWaveEdge / waveWidth);\n          finalHeight += waveIntensity * 2.0 * (1.0 - (waveTime.current / 8));\n          state.energy = Math.max(state.energy, waveIntensity);\n        }\n      }\n      \n      // 5. Easter egg special effects\n      if (easterEggActive) {\n        // Add synchronized height patterns\n        const gridX = Math.floor((cube.position.x + (gridSize/2)) / 1.0);\n        const gridZ = Math.floor((cube.position.z + (gridSize/2)) / 1.0);\n        \n        // Checkerboard pattern\n        const isEvenSquare = (gridX + gridZ) % 2 === 0;\n        const checkerboardHeight = isEvenSquare ? \n          Math.sin(currentTime * 3) * 0.5 : \n          Math.sin(currentTime * 3 + Math.PI) * 0.5;\n          \n        finalHeight += checkerboardHeight;\n        \n        // Increase energy for more visual effects\n        state.energy = Math.max(state.energy, 0.3);\n      } else {\n        // When not in Easter egg mode, reduce energy gradually\n        state.energy = Math.max(0, state.energy - 0.03);\n      }\n      \n      // Set the target height\n      state.targetY = finalHeight;\n      \n      // Smooth movement toward target height - faster response\n      state.currentY += (state.targetY - state.currentY) * 0.15; // Increased from 0.1\n      \n      // Update cube position and appearance\n      cubeRef.current.position.y = state.currentY;\n      \n      // Auto-rotation based on energy level and Easter egg status\n      const rotationMultiplier = easterEggActive ? 3.0 : 1.0;\n      const baseRotationSpeed = 0.001 * rotationMultiplier;\n      cubeRef.current.rotation.y += baseRotationSpeed + state.energy * 0.03 * rotationMultiplier;\n      cubeRef.current.rotation.x += baseRotationSpeed + state.energy * 0.02 * rotationMultiplier;\n      \n      // Update scale based on energy in Easter egg mode\n      if (easterEggActive) {\n        const scalePulse = 1.0 + state.energy * 0.3 * Math.sin(currentTime * 4 + cube.index * 0.2);\n        cubeRef.current.scale.set(scalePulse, scalePulse, scalePulse);\n      } else {\n        cubeRef.current.scale.set(1, 1, 1);\n      }\n      \n      // Update color based on energy and mode using the unified color system\n      if (cubeRef.current.material) {\n        // Use the getDynamicColor helper for consistent color derivation\n        const dynamicColors = getDynamicColor(\n          theme,\n          currentTime + (cube.index * 0.1), // Add cube index for variation\n          state.energy,\n          SHAPE_TYPES.BOX,\n          false // not hovered\n        );\n        \n        // Apply colors to material\n        cubeRef.current.material.color.copy(dynamicColors.main);\n        cubeRef.current.material.emissive.copy(dynamicColors.emissive);\n        cubeRef.current.material.emissiveIntensity = dynamicColors.emissiveIntensity;\n        \n        // Override with rainbow colors in Easter egg mode\n        if (easterEggActive) {\n          const hue = ((currentTime * 0.2) + (cube.index * 0.01)) % 1.0;\n          cubeRef.current.material.color.setHSL(hue, 0.8, 0.5);\n          cubeRef.current.material.emissive.setHSL(hue, 0.9, 0.3);\n          cubeRef.current.material.emissiveIntensity = 0.5;\n        }\n        \n        // Update material\n        cubeRef.current.material.needsUpdate = true;\n      }\n    });\n  });\n  \n  return (\n    <group position={[0, -1, 0]}>\n      {/* Add central light in Easter egg mode */}\n      {easterEggActive && (\n        <pointLight\n          position={[0, 2, 0]}\n          intensity={2}\n          distance={10}\n          color={new THREE.Color().setHSL(0.8, 0.8, 0.6)} // Theme-derived color\n        />\n      )}\n      \n      {/* Cube meshes with theme-derived base colors */}\n      {cubeGrid.map((cube, i) => {\n        // Get initial color from theme\n        const baseColor = themeColorToThreeColor(theme.palette.secondary.main);\n        const emissiveColor = themeColorToThreeColor(theme.palette.secondary.light);\n        \n        return (\n          <mesh\n            key={i}\n            ref={cubeRefs.current[i]}\n            position={[cube.position.x, 0, cube.position.z]}\n          >\n            <boxGeometry args={[0.5, 0.5, 0.5]} />\n            <meshStandardMaterial \n              color={baseColor}\n              emissive={emissiveColor}\n              emissiveIntensity={0}\n              metalness={0.3}\n              roughness={0.7}\n            />\n          </mesh>\n        );\n      })}\n    </group>\n  );\n};\n\nexport default BoxScene;","import React, { useRef, useMemo, useEffect, useCallback } from 'react';\nimport { useTheme, useMediaQuery } from '@mui/material';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { Html } from '@react-three/drei';\nimport * as THREE from 'three';\n\nimport { useSceneState } from '../SceneContext';\nimport { getDynamicColor } from '../utils/sceneThemeUtils';\nimport { SHAPE_TYPES, DIMENSIONS } from '../constants';\n\n/**\n * TorusScene Component - Interactive 3D Torus Geometry\n *\n * Interaction\n * - Move mouse: rotates torus and changes colors\n * - Click: spawns new torus rings with different materials\n * - Double click (or press \"Enter\"): cycles to next scene\n *\n * Visual\n * - Multiple torus geometries with different materials\n * - Theme-driven colors with emissive effects\n * - Smooth rotation and scaling animations\n * - Interactive hover effects\n */\n\nconst TORUS_COUNT = 8;\nconst ROTATION_SPEED = 0.01;\nconst HOVER_SCALE = 1.2;\nconst INTERACTION_RADIUS = 3;\n\nconst TorusScene = ({ \n  color = new THREE.Color(),\n  mousePosition, \n  mouseData,\n  isTransitioning,\n  easterEggActive = false,\n  interactionCount = 0\n}) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const { size, viewport, camera } = useThree();\n  const { isInteractionEnabled, switchShapeType } = useSceneState();\n  \n  // Refs for torus meshes and animation state\n  const torusGroupRef = useRef();\n  const torusRefs = useRef([]);\n  const mouseWorldPos = useRef(new THREE.Vector3());\n  const raycaster = useMemo(() => new THREE.Raycaster(), []);\n  const mouse = useRef(new THREE.Vector2());\n  const timeRef = useRef(0);\n  \n  // Responsive torus count\n  const actualTorusCount = isMobile ? Math.floor(TORUS_COUNT * 0.6) : TORUS_COUNT;\n\n  // Initialize torus data\n  const torusData = useMemo(() => {\n    return Array.from({ length: actualTorusCount }, (_, i) => {\n      const angle = (i / actualTorusCount) * Math.PI * 2;\n      const radius = 2 + Math.sin(i * 0.5) * 0.5;\n      return {\n        id: i,\n        position: [\n          Math.cos(angle) * radius,\n          Math.sin(angle) * radius,\n          (Math.random() - 0.5) * 2\n        ],\n        rotation: [Math.random() * Math.PI, Math.random() * Math.PI, Math.random() * Math.PI],\n        scale: 0.3 + Math.random() * 0.4,\n        speed: 0.5 + Math.random() * 0.5,\n        hovered: false,\n        material: i % 3 // Different material types\n      };\n    });\n  }, [actualTorusCount]);\n\n  // Mouse position tracking\n  const updateMousePosition = useCallback((event) => {\n    mouse.current.set(\n      (event.clientX / size.width) * 2 - 1,\n      -(event.clientY / size.height) * 2 + 1\n    );\n    \n    // Update world position for interaction\n    raycaster.setFromCamera(mouse.current, camera);\n    const intersectPoint = new THREE.Vector3();\n    raycaster.ray.intersectPlane(new THREE.Plane(new THREE.Vector3(0, 0, 1), 0), intersectPoint);\n    mouseWorldPos.current.copy(intersectPoint);\n  }, [camera, raycaster, size.width, size.height]);\n\n  // Create torus geometry and materials\n  const torusGeometry = useMemo(() => {\n    const { radius, tube, radialSegments, tubularSegments } = DIMENSIONS.torus;\n    return new THREE.TorusGeometry(radius, tube, radialSegments, tubularSegments);\n  }, []);\n\n  const materials = useMemo(() => {\n    return [\n      // Standard material\n      new THREE.MeshStandardMaterial({\n        metalness: 0.7,\n        roughness: 0.2,\n        transparent: true,\n        opacity: 0.8\n      }),\n      // Emissive material\n      new THREE.MeshStandardMaterial({\n        metalness: 0.3,\n        roughness: 0.4,\n        transparent: true,\n        opacity: 0.9,\n        emissiveIntensity: 0.3\n      }),\n      // Glass-like material\n      new THREE.MeshPhysicalMaterial({\n        metalness: 0.1,\n        roughness: 0.1,\n        transmission: 0.9,\n        transparent: true,\n        opacity: 0.7,\n        thickness: 0.5\n      })\n    ];\n  }, []);\n\n  // Initialize torus refs\n  useEffect(() => {\n    torusRefs.current = torusRefs.current.slice(0, actualTorusCount);\n  }, [actualTorusCount]);\n\n  // Interaction handlers\n  const onPointerMove = useCallback((e) => {\n    if (!isInteractionEnabled || isTransitioning) return;\n    updateMousePosition(e);\n    \n    // Check for torus hover\n    raycaster.setFromCamera(mouse.current, camera);\n    const meshes = torusRefs.current.filter(Boolean);\n    const intersects = raycaster.intersectObjects(meshes);\n    \n    // Reset all hover states\n    torusData.forEach(data => data.hovered = false);\n    \n    if (intersects.length > 0) {\n      const intersected = intersects[0].object;\n      const index = torusRefs.current.indexOf(intersected);\n      if (index !== -1) {\n        torusData[index].hovered = true;\n      }\n    }\n  }, [isInteractionEnabled, isTransitioning, updateMousePosition, camera, raycaster, torusData]);\n\n  const onPointerDown = useCallback((e) => {\n    if (!isInteractionEnabled || isTransitioning) return;\n    updateMousePosition(e);\n    \n    // Add a new torus or trigger effect on click\n    if (torusGroupRef.current) {\n      const randomTorus = torusRefs.current[Math.floor(Math.random() * torusRefs.current.length)];\n      if (randomTorus) {\n        // Trigger a scale animation\n        randomTorus.scale.setScalar(0.1);\n      }\n    }\n  }, [isInteractionEnabled, isTransitioning, updateMousePosition]);\n\n  // Handle keyboard for Enter to cycle\n  useEffect(() => {\n    const onKeyDown = (e) => {\n      if (e.key === 'Enter' && switchShapeType) switchShapeType();\n    };\n    window.addEventListener('keydown', onKeyDown);\n    return () => {\n      window.removeEventListener('keydown', onKeyDown);\n    };\n  }, [switchShapeType]);\n\n  // Main animation loop\n  useFrame((_, dt) => {\n    if (isTransitioning) return;\n    \n    timeRef.current += dt;\n    const t = timeRef.current;\n\n    // Update torus group rotation\n    if (torusGroupRef.current) {\n      torusGroupRef.current.rotation.y += ROTATION_SPEED;\n      torusGroupRef.current.rotation.x += ROTATION_SPEED * 0.5;\n    }\n\n    // Update individual torus meshes\n    torusRefs.current.forEach((mesh, i) => {\n      if (!mesh) return;\n      \n      const data = torusData[i];\n      if (!data) return;\n\n      // Individual rotation\n      mesh.rotation.x += dt * data.speed;\n      mesh.rotation.y += dt * data.speed * 0.7;\n      mesh.rotation.z += dt * data.speed * 0.3;\n\n      // Hover scaling\n      const targetScale = data.hovered ? data.scale * HOVER_SCALE : data.scale;\n      mesh.scale.lerp(new THREE.Vector3(targetScale, targetScale, targetScale), 0.1);\n\n      // Mouse interaction - attract/repel effect\n      if (isInteractionEnabled && mouseWorldPos.current) {\n        const distance = mesh.position.distanceTo(mouseWorldPos.current);\n        if (distance < INTERACTION_RADIUS) {\n          const force = (INTERACTION_RADIUS - distance) / INTERACTION_RADIUS;\n          const direction = new THREE.Vector3()\n            .subVectors(mesh.position, mouseWorldPos.current)\n            .normalize()\n            .multiplyScalar(force * 0.02);\n          mesh.position.add(direction);\n        }\n      }\n\n      // Floating animation\n      mesh.position.y += Math.sin(t * data.speed + i) * 0.002;\n      mesh.position.z += Math.cos(t * data.speed * 0.7 + i) * 0.001;\n\n      // Update material colors\n      if (mesh.material) {\n        const dynamic = getDynamicColor(\n          theme,\n          t + i * 0.1,\n          data.hovered ? 1 : 0.5,\n          SHAPE_TYPES.TORUS,\n          data.hovered\n        );\n        \n        mesh.material.color.copy(dynamic.main);\n        mesh.material.emissive.copy(dynamic.emissive);\n        \n        if (easterEggActive) {\n          const hue = ((t * 0.5) + (i * 0.1)) % 1.0;\n          mesh.material.color.setHSL(hue, 0.8, 0.6);\n          mesh.material.emissive.setHSL((hue + 0.3) % 1.0, 0.9, 0.3);\n          mesh.material.emissiveIntensity = 0.5;\n        }\n      }\n    });\n  });\n\n  return (\n    <group>\n      {/* Interaction hint */}\n      {isInteractionEnabled && !isTransitioning && (\n        <Html center transform sprite style={{ pointerEvents: 'none' }}>\n          <div style={{\n            fontSize: isMobile ? 10 : 12,\n            opacity: 0.6,\n            userSelect: 'none',\n            padding: '4px 8px',\n            borderRadius: 8,\n            background: 'rgba(0,0,0,0.2)',\n            backdropFilter: 'blur(2px)',\n          }}>\n            Hover and click torus rings. Double-click to cycle scenes.\n          </div>\n        </Html>\n      )}\n\n      {/* Main torus group with interactions */}\n      <group\n        ref={torusGroupRef}\n        onPointerMove={onPointerMove}\n        onPointerDown={onPointerDown}\n        onDoubleClick={() => switchShapeType && switchShapeType()}\n      >\n        {/* Render torus meshes */}\n        {torusData.map((data, i) => (\n          <mesh\n            key={data.id}\n            ref={(el) => (torusRefs.current[i] = el)}\n            geometry={torusGeometry}\n            material={materials[data.material]}\n            position={data.position}\n            rotation={data.rotation}\n            scale={data.scale}\n          />\n        ))}\n      </group>\n    </group>\n  );\n};\n\nexport default TorusScene;\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport { useSceneState } from './SceneContext';\nimport { extractThemeColors, themeColorToThreeColor } from './utils/sceneThemeUtils';\nimport SphereScene from './scenes/SphereScene';\nimport BoxScene from './scenes/BoxScene'; \nimport TorusScene from './scenes/TorusScene';\nimport { SHAPE_TYPES } from './constants';\n\n/**\n * ActiveScene - Manages which 3D scene is currently active\n */\nconst ActiveScene = ({ \n  mousePosition, \n  mouseData,\n  onClick, \n  isDragging, \n  theme,\n  easterEggActive = false,\n  interactionCount = 0\n}) => {\n  // eslint-disable-next-line no-unused-vars\n  const { size } = useThree();\n  const { currentShapeType, switchShapeType, isTransitioning } = useSceneState();\n  // eslint-disable-next-line no-unused-vars\n  const [transitionProgress, setTransitionProgress] = useState(0);\n  \n  // Extract theme colors and use them to determine active color\n  useMemo(() => {\n    return extractThemeColors(theme);\n  }, [theme]);\n  \n  // Set transition state when scene changes\n  useEffect(() => {\n    if (isTransitioning) {\n      let startTime = Date.now();\n      const transitionDuration = 1000; // 1 second transition\n      \n      const updateTransition = () => {\n        const elapsed = Date.now() - startTime;\n        const progress = Math.min(1, elapsed / transitionDuration);\n        \n        setTransitionProgress(progress);\n        \n        if (progress < 1) {\n          requestAnimationFrame(updateTransition);\n        }\n      };\n      \n      requestAnimationFrame(updateTransition);\n    }\n  }, [isTransitioning]);\n  \n  // Scene click handler\n  const handleSceneClick = () => {\n    if (onClick && !isDragging) {\n      onClick();\n    }\n    \n    if (!isTransitioning && switchShapeType) {\n      // Use the switchShapeType function from context to handle scene changes\n      switchShapeType();\n    }\n  };\n  \n  // Get appropriate color for current scene - using theme derivation\n  const activeColor = useMemo(() => {\n    // Get the appropriate theme color based on scene type\n    let themeColor;\n    \n    switch (currentShapeType) {\n      case SHAPE_TYPES.SPHERE:\n        themeColor = theme.palette.primary.main;\n        break;\n      case SHAPE_TYPES.BOX:\n        themeColor = theme.palette.secondary.main;\n        break;\n      case SHAPE_TYPES.TORUS:\n        themeColor = theme.palette.info?.main || theme.palette.primary.light;\n        break;\n      default:\n        themeColor = theme.palette.primary.main;\n    }\n    \n    // Convert to THREE.Color\n    return themeColorToThreeColor(themeColor);\n  }, [currentShapeType, theme.palette]);\n  \n  return (\n    <group onClick={handleSceneClick}>\n      {/* Pass both mousePosition and complete mouseData */}\n      {currentShapeType === SHAPE_TYPES.SPHERE && (\n        <SphereScene \n          color={activeColor}\n          mousePosition={mousePosition}\n          mouseData={mouseData}\n          isTransitioning={isTransitioning}\n          easterEggActive={easterEggActive}\n          interactionCount={interactionCount}\n          theme={theme}\n        />\n      )}\n      \n      {currentShapeType === SHAPE_TYPES.BOX && (\n        <BoxScene \n          color={activeColor}\n          mousePosition={mousePosition}\n          mouseData={mouseData}\n          isTransitioning={isTransitioning}\n          easterEggActive={easterEggActive}\n          interactionCount={interactionCount}\n        />\n      )}\n      \n      {currentShapeType === SHAPE_TYPES.TORUS && (\n        <TorusScene \n          color={activeColor}\n          mousePosition={mousePosition}\n          mouseData={mouseData}\n          isTransitioning={isTransitioning}\n          easterEggActive={easterEggActive}\n          interactionCount={interactionCount}\n        />\n      )}\n    </group>\n  );\n};\n\nexport default ActiveScene;\n","import React from 'react';\nimport { Box, CircularProgress, Typography, useTheme } from '@mui/material';\n\n/**\n * LoadingFallback Component\n * \n * Displays a loading spinner and message while the 3D scene is initializing.\n * Provides a smoother experience when the Three.js canvas is loading.\n */\nconst LoadingFallback = () => {\n  const theme = useTheme();\n  \n  return (\n    <Box\n      sx={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: theme.palette.background.default,\n        zIndex: 5,\n      }}\n    >\n      <CircularProgress \n        size={40} \n        thickness={4} \n        sx={{ \n          color: theme.palette.primary.main,\n          mb: 2\n        }} \n      />\n      <Typography \n        variant=\"body2\" \n        color=\"textSecondary\"\n        sx={{ \n          fontWeight: 500,\n          opacity: 0.8\n        }}\n      >\n        Loading 3D environment...\n      </Typography>\n    </Box>\n  );\n};\n\nexport default LoadingFallback;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport { OrbitControls, PerspectiveCamera } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { useSceneState } from './SceneContext';\n\n/**\n * Interactive Camera System\n * \n * Provides advanced camera controls with:\n * - Auto-rotation when idle\n * - Smooth transitions between camera positions\n * - Focus on specific scene elements\n * - Zoom functionality with the scroll wheel\n */\nconst InteractiveCamera = ({ enableAutoRotate = true, rotateSpeed = 0.2 }) => {\n  const { camera, gl } = useThree();\n  const controlsRef = useRef();\n  const { isTransitioning, isDragging, currentShapeType } = useSceneState();\n  const [lastInteraction, setLastInteraction] = useState(Date.now());\n  const [isAutoRotating, setIsAutoRotating] = useState(true);\n  \n  // Set initial camera position\n  useEffect(() => {\n    camera.position.set(0, 0, 16); // Increased from 12 to 16 for a more zoomed-out view\n    camera.lookAt(0, 0, 0);\n  }, [camera]);\n  \n  // Handle camera target updates based on shape type\n  useEffect(() => {\n    if (!controlsRef.current) return;\n    \n    const target = new THREE.Vector3(0, 0, 0);\n    \n    // Different shapes can have slightly different camera focus points\n    switch (currentShapeType) {\n      case 0: // SPHERE\n        target.set(0, 0, 0);\n        break;\n      case 1: // CUBE\n        target.set(0, 0.5, 0);\n        break;\n      case 2: // TORUS\n        target.set(0, 0, 0);\n        break;\n      default:\n        target.set(0, 0, 0);\n    }\n    \n    // Smoothly transition to new target\n    const startTarget = controlsRef.current.target.clone();\n    const duration = 1000; // ms\n    const startTime = Date.now();\n    \n    function updateTarget() {\n      const elapsed = Date.now() - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n      const easeProgress = progress < 0.5 \n        ? 2 * progress * progress \n        : 1 - Math.pow(-2 * progress + 2, 2) / 2; // Ease in-out quad\n      \n      const newTarget = new THREE.Vector3().lerpVectors(\n        startTarget,\n        target,\n        easeProgress\n      );\n      \n      controlsRef.current.target.copy(newTarget);\n      \n      if (progress < 1) {\n        requestAnimationFrame(updateTarget);\n      }\n    }\n    \n    updateTarget();\n  }, [currentShapeType]);\n\n  // Auto-rotation logic when idle\n  useFrame(() => {\n    if (!controlsRef.current) return;\n    \n    const idleTime = Date.now() - lastInteraction;\n    const shouldAutoRotate = enableAutoRotate && idleTime > 3000 && !isDragging;\n    \n    if (shouldAutoRotate !== isAutoRotating) {\n      setIsAutoRotating(shouldAutoRotate);\n      controlsRef.current.autoRotate = shouldAutoRotate;\n    }\n    \n    // Adjust damping during transitions for smoother movement\n    if (isTransitioning) {\n      controlsRef.current.dampingFactor = 0.1;\n    } else {\n      controlsRef.current.dampingFactor = 0.05;\n    }\n  });\n  \n  // Reset idle timer on user interaction\n  const handleInteraction = () => {\n    setLastInteraction(Date.now());\n    if (isAutoRotating) {\n      setIsAutoRotating(false);\n      controlsRef.current.autoRotate = false;\n    }\n  };\n  \n  return (\n    <>\n      <PerspectiveCamera \n        makeDefault \n        fov={40} \n        near={0.1} \n        far={100}\n      />\n      \n      <OrbitControls\n        ref={controlsRef}\n        enableZoom={false} // Disabled zoom to prevent interference with page scrolling\n        minDistance={12}\n        maxDistance={20}\n        zoomSpeed={0.6}\n        enablePan={false}\n        rotateSpeed={rotateSpeed}\n        minPolarAngle={Math.PI / 6}\n        maxPolarAngle={Math.PI / 1.5}\n        dampingFactor={0.05}\n        autoRotate={isAutoRotating}\n        autoRotateSpeed={0.5}\n        domElement={gl.domElement}\n        onStart={handleInteraction}\n        onEnd={handleInteraction}\n        onChange={handleInteraction}\n      />\n    </>\n  );\n};\n\nexport default InteractiveCamera;","import { useState, useEffect, useCallback } from 'react';\n\n/**\n * useMouseTracking Hook\n * \n * Tracks mouse position in both screen space and normalized coordinates (-1 to +1).\n * This hook works outside of the Three.js Canvas, making it suitable for\n * components that need mouse data but aren't part of the 3D scene.\n */\nconst useMouseTracking = ({ domElement = null } = {}) => {\n  // Mouse positions in different coordinate systems\n  const [screenPosition, setScreenPosition] = useState({ x: 0, y: 0 });\n  const [normalizedPosition, setNormalizedPosition] = useState({ x: 0, y: 0 });\n  const [isDragging, setIsDragging] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n  \n  // Get real DOM element for event handling\n  const getElement = useCallback(() => {\n    return domElement || document.documentElement;\n  }, [domElement]);\n  \n  // Convert screen position to normalized device coordinates (-1 to +1)\n  const normalizeScreenPosition = useCallback((clientX, clientY) => {\n    const element = getElement();\n    const rect = element.getBoundingClientRect();\n    \n    // Convert to normalized device coordinates (-1 to +1)\n    const x = ((clientX - rect.left) / rect.width) * 2 - 1;\n    const y = -((clientY - rect.top) / rect.height) * 2 + 1; // Y is inverted in 3D space\n    \n    return { x, y };\n  }, [getElement]);\n  \n  // Handle mouse movement\n  const handleMouseMove = useCallback((event) => {\n    // Get normalized position\n    const normalized = normalizeScreenPosition(event.clientX, event.clientY);\n    setNormalizedPosition(normalized);\n    setScreenPosition({ x: event.clientX, y: event.clientY });\n    \n    // Mark as active\n    setIsActive(true);\n  }, [normalizeScreenPosition]);\n  \n  // Mouse down/up for drag detection\n  const handleMouseDown = useCallback(() => {\n    setIsDragging(true);\n  }, []);\n  \n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n  \n  // Touch event handlers\n  const handleTouchStart = useCallback((event) => {\n    if (event.touches.length === 1) {\n      handleMouseMove({\n        clientX: event.touches[0].clientX,\n        clientY: event.touches[0].clientY\n      });\n      handleMouseDown();\n    }\n  }, [handleMouseMove, handleMouseDown]);\n  \n  const handleTouchMove = useCallback((event) => {\n    if (event.touches.length === 1) {\n      handleMouseMove({\n        clientX: event.touches[0].clientX,\n        clientY: event.touches[0].clientY\n      });\n    }\n  }, [handleMouseMove]);\n  \n  const handleTouchEnd = useCallback(() => {\n    handleMouseUp();\n  }, [handleMouseUp]);\n  \n  // Setup event listeners\n  useEffect(() => {\n    const element = getElement();\n    \n    element.addEventListener('mousemove', handleMouseMove, { passive: true });\n    element.addEventListener('mousedown', handleMouseDown);\n    element.addEventListener('mouseup', handleMouseUp);\n    element.addEventListener('mouseleave', handleMouseUp);\n    element.addEventListener('touchstart', handleTouchStart, { passive: true });\n    element.addEventListener('touchmove', handleTouchMove, { passive: true });\n    element.addEventListener('touchend', handleTouchEnd);\n    \n    // Initialize with center position\n    const { width, height } = element.getBoundingClientRect();\n    handleMouseMove({ \n      clientX: width / 2, \n      clientY: height / 2 \n    });\n    \n    return () => {\n      element.removeEventListener('mousemove', handleMouseMove);\n      element.removeEventListener('mousedown', handleMouseDown);\n      element.removeEventListener('mouseup', handleMouseUp);\n      element.removeEventListener('mouseleave', handleMouseUp);\n      element.removeEventListener('touchstart', handleTouchStart);\n      element.removeEventListener('touchmove', handleTouchMove);\n      element.removeEventListener('touchend', handleTouchEnd);\n    };\n  }, [\n    getElement,\n    handleMouseMove,\n    handleMouseDown,\n    handleMouseUp,\n    handleTouchStart,\n    handleTouchMove,\n    handleTouchEnd\n  ]);\n  \n  return {\n    // Screen coordinates (pixel values)\n    screen: screenPosition,\n    \n    // Normalized device coordinates (-1 to +1)\n    normalized: normalizedPosition,\n    \n    // For Three.js components (same as normalized)\n    forThree: normalizedPosition,\n    \n    // State flags\n    isDragging,\n    isActive\n  };\n};\n\nexport default useMouseTracking;\n","import React, { useEffect } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { useSceneState } from '../SceneContext';\n\n/**\n * WorldMouseListener Component\n * \n * Converts screen/normalized mouse coordinates to world space coordinates\n * and updates the SceneContext with this information.\n * \n * This component must be placed inside the <Canvas> because it uses useThree().\n */\nconst WorldMouseListener = ({ mouseData }) => {\n  const { camera, raycaster } = useThree();\n  const { updateMousePosition } = useSceneState();\n  \n  // Virtual plane for raycasting\n  const virtualPlane = React.useMemo(() => {\n    return new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);\n  }, []);\n  \n  // Convert normalized mouse coordinates to world coordinates\n  useEffect(() => {\n    if (!mouseData || !mouseData.normalized) return;\n    \n    // Update the raycaster with current mouse position\n    raycaster.setFromCamera(\n      { x: mouseData.normalized.x, y: mouseData.normalized.y },\n      camera\n    );\n    \n    // Calculate world position using raycasting against a virtual plane\n    const worldPosition = new THREE.Vector3();\n    raycaster.ray.intersectPlane(virtualPlane, worldPosition);\n    \n    // Create enhanced mouseData with world coordinates\n    const enhancedMouseData = {\n      ...mouseData,\n      world: worldPosition,\n    };\n    \n    // Update scene context with the enhanced data\n    updateMousePosition(enhancedMouseData);\n  }, [mouseData, camera, raycaster, virtualPlane, updateMousePosition]);\n  \n  return null; // This component doesn't render anything\n};\n\nexport default WorldMouseListener;\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport { SceneProvider, useSceneState } from './SceneContext';\nimport ActiveScene from './ActiveScene';\nimport LoadingFallback from './components/LoadingFallback';\nimport { CANVAS_SETTINGS } from './constants';\nimport InteractiveCamera from './InteractiveCamera';\nimport useMouseTracking from './hooks/useMouseTracking';\nimport WorldMouseListener from './components/WorldMouseListener';\n\n/**\n * Background3DInner Component - Inner component with access to SceneContext\n */\nconst Background3DInner = ({ onSceneClick, theme, performanceMode = 'medium', mouseData }) => {\n  const { switchShapeType, updateDragging } = useSceneState();\n  const [isDragging, setIsDragging] = useState(false);\n  \n  // Update dragging state to context\n  useEffect(() => {\n    updateDragging(isDragging);\n  }, [isDragging, updateDragging]);\n  \n  // Handle ActiveScene click\n  const handleSceneClick = useCallback(() => {\n    console.log(\"🎯 Background3DInner: ActiveScene click detected\");\n    \n    // Only trigger if not dragging\n    if (!isDragging) {\n      // Invoke context method to change shape\n      switchShapeType();\n      \n      // Also call parent handler if provided\n      if (onSceneClick) {\n        console.log(\"🎯 Background3DInner: Calling parent onSceneClick handler\");\n        onSceneClick();\n      }\n    }\n  }, [onSceneClick, switchShapeType, isDragging]);\n\n  return (\n    <>\n      {/* World coordinate transformer - must be inside Canvas */}\n      <WorldMouseListener mouseData={mouseData} />\n      \n      {/* Advanced Camera with auto-rotation and interaction */}\n      <InteractiveCamera enableAutoRotate={true} rotateSpeed={0.3} />\n      \n      {/* Lights */}\n      <ambientLight intensity={0.5} />\n      <pointLight position={[10, 10, 10]} intensity={1} />\n      <spotLight \n        position={[0, 10, 0]} \n        angle={0.3} \n        penumbra={1} \n        intensity={1.5} \n        castShadow \n      />\n      \n      {/* Add OrbitControls to enable dragging/rotation */}\n      <OrbitControls \n        enableZoom={false}\n        enablePan={false}\n        rotateSpeed={0.5}\n        minPolarAngle={Math.PI / 6}     // Limit vertical rotation\n        maxPolarAngle={Math.PI / 1.5}   // Limit vertical rotation\n        dampingFactor={0.05}            // Smooth damping effect\n        enabled={true}                  // Always enabled\n        onChange={() => setIsDragging(true)}\n        onEnd={() => setIsDragging(false)}\n      />\n      \n      {/* Main scene with shapes */}\n      <ActiveScene \n        mousePosition={mouseData ? mouseData.normalized : null} \n        onClick={handleSceneClick} \n        isDragging={isDragging}\n        theme={theme}\n        performanceMode={performanceMode}\n      />\n    </>\n  );\n};\n\n/**\n * Background3D Component - Enhanced interactive 3D background for the hero section\n */\nconst Background3D = ({ theme, onSceneClick, performanceMode = 'medium' }) => {\n  const containerRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  \n  // Use mouse tracking without Three.js dependencies\n  const mouseData = useMouseTracking({\n    domElement: containerRef.current\n  });\n  \n  // Handle loading state\n  const handleLoaded = useCallback(() => {\n    setIsLoading(false);\n    console.log(\"🎨 Background3D: Canvas loaded successfully\");\n  }, []);\n\n  return (\n    <div \n      ref={containerRef} \n      style={{ \n        position: 'absolute', \n        top: 0, \n        left: 0, \n        width: '100%', \n        height: '100%', \n        zIndex: 0,\n        cursor: mouseData.isDragging ? 'grabbing' : 'pointer',\n        overflow: 'hidden',\n        pointerEvents: 'auto',\n        userSelect: 'none' \n      }}\n    >\n      {isLoading && <LoadingFallback />}\n      \n      <SceneProvider>\n        {/* REMOVED SceneControls completely to avoid duplication and conflicts */}\n        \n        <Canvas \n          camera={CANVAS_SETTINGS.camera}\n          gl={CANVAS_SETTINGS.gl}\n          style={{ \n            background: theme.palette.background.default,\n            visibility: isLoading ? 'hidden' : 'visible',\n            touchAction: 'none' // Prevents touch scrolling while interacting\n          }}\n          onCreated={handleLoaded}\n          dpr={performanceMode === 'high' ? window.devicePixelRatio : 1}\n        >\n          <Background3DInner \n            onSceneClick={onSceneClick} \n            theme={theme} \n            performanceMode={performanceMode}\n            mouseData={mouseData}\n          />\n        </Canvas>\n      </SceneProvider>\n    </div>\n  );\n};\n\nexport default Background3D;\n","import React, { useState, useEffect } from 'react';\nimport { Box, Typography, Fade, useTheme } from '@mui/material';\nimport MouseIcon from '@mui/icons-material/Mouse';\nimport TouchAppIcon from '@mui/icons-material/TouchApp';\nimport ThreeDRotationIcon from '@mui/icons-material/ThreeDRotation';\n\n/**\n * InteractionGuide Component\n * \n * Displays visual cues to guide users on how to interact with the 3D background.\n * - Shows different instructions for mouse vs touch devices\n * - Provides scene-specific instructions\n * - Fades out after a short period\n * - Can be toggled on/off with a prop\n */\nconst InteractionGuide = ({ \n  show = true, \n  autoHideDelay = 2000, // Reduced from 5000ms to 2000ms\n  position = 'bottom'\n}) => {\n  const theme = useTheme();\n  const [visible, setVisible] = useState(true);\n  const [isTouchDevice, setIsTouchDevice] = useState(false);\n  \n  // Detect touch device\n  useEffect(() => {\n    setIsTouchDevice('ontouchstart' in window || navigator.maxTouchPoints > 0);\n  }, []);\n  \n  // Auto-hide after delay\n  useEffect(() => {\n    if (!show) {\n      setVisible(false);\n      return;\n    }\n    \n    setVisible(true);\n    const timer = setTimeout(() => {\n      setVisible(false);\n    }, autoHideDelay);\n    \n    return () => clearTimeout(timer);\n  }, [show, autoHideDelay]);\n  \n  // Position styles\n  const positionStyles = {\n    top: {\n      top: '20%',\n      left: '50%',\n      transform: 'translateX(-50%)',\n    },\n    center: {\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n    },\n    bottom: {\n      bottom: '15%',\n      left: '50%',\n      transform: 'translateX(-50%)',\n    }\n  };\n\n  // Get minimal, non-prescriptive instructions\n  const getInstructions = () => {\n    return {\n      action: isTouchDevice \n        ? \"Touch to interact\" \n        : \"Click to interact\",\n      secondary: isTouchDevice\n        ? \"Drag to explore\"\n        : \"Move and drag to explore\"\n    };\n  };\n\n  const instructions = getInstructions();\n  \n  return (\n    <Fade in={visible && show} timeout={{ enter: 600, exit: 400 }}>\n      <Box\n        sx={{\n          position: 'absolute',\n          ...positionStyles[position],\n          bgcolor: 'rgba(0, 0, 0, 0.7)',\n          color: 'white',\n          padding: '12px 20px',\n          borderRadius: '24px',\n          backdropFilter: 'blur(4px)',\n          boxShadow: theme.shadows[4],\n          zIndex: 100,\n          pointerEvents: 'none',\n          textAlign: 'center',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          gap: 1,\n          maxWidth: '200px',\n        }}\n      >\n        {isTouchDevice ? (\n          <>\n            <TouchAppIcon fontSize=\"medium\" />\n            <Box>\n              <Typography variant=\"body2\" fontWeight=\"bold\">\n                {instructions.action}\n              </Typography>\n              <Typography variant=\"body2\" sx={{ opacity: 0.8, mt: 0.5 }}>\n                {instructions.secondary}\n              </Typography>\n            </Box>\n          </>\n        ) : (\n          <>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n              <MouseIcon fontSize=\"small\" />\n              <ThreeDRotationIcon fontSize=\"small\" />\n            </Box>\n            <Box>\n              <Typography variant=\"body2\" fontWeight=\"bold\">\n                {instructions.action}\n              </Typography>\n              <Typography variant=\"body2\" sx={{ opacity: 0.8, mt: 0.5 }}>\n                {instructions.secondary}\n              </Typography>\n            </Box>\n          </>\n        )}\n      </Box>\n    </Fade>\n  );\n};\n\nexport default InteractionGuide;","import React, { useState, useEffect, memo, useCallback, useRef, useReducer } from 'react';\nimport { Box, useTheme, useMediaQuery, IconButton, Tooltip, Fade } from '@mui/material';\nimport HeroContent from './HeroContent';\nimport ErrorBoundary from '../common/ErrorBoundary';\nimport ScrollIndicator from './ScrollIndicator';\nimport Background3D from './background3d/Background3D';\nimport { SHAPE_TYPES } from './background3d/constants';\nimport { SceneProvider, useSceneState } from './background3d/SceneContext';\nimport InteractionGuide from './background3d/components/InteractionGuide';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\n\n/**\n * HeroBackground Component - Handles the 3D background with proper context integration\n */\nconst HeroBackground = memo(({ onSceneClick, onToggleParticles, showParticles, easterEggActive, interactionCount }) => {\n  const [showInteractionHint, setShowInteractionHint] = useState(false); // Changed to false - no auto-show\n  \n  // Only show hint briefly on first load, then let users discover naturally\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowInteractionHint(true);\n      // Hide after just 1.5 seconds\n      setTimeout(() => setShowInteractionHint(false), 1500);\n    }, 1000); // Show after 1 second delay\n    \n    return () => clearTimeout(timer);\n  }, []);\n  \n  return (\n    <ErrorBoundary \n      componentName=\"Background3D\"\n      fallback={\n        <Box \n          sx={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            opacity: 0.6,\n            background: 'radial-gradient(circle at 30% 30%, rgba(0,0,0,0.05) 0%, rgba(0,0,0,0.2) 100%)',\n            pointerEvents: 'none',\n          }}\n        />\n      }\n    >\n      {/* Provide SceneContext at this level to control the scene */}\n      <SceneProvider>\n        <BackgroundController\n          onSceneClick={onSceneClick}\n          onToggleParticles={onToggleParticles}\n          showParticles={showParticles}\n          showInteractionHint={showInteractionHint}\n          easterEggActive={easterEggActive}\n          interactionCount={interactionCount}\n        />\n      </SceneProvider>\n    </ErrorBoundary>\n  );\n});\n\n/**\n * BackgroundController - Component with access to scene context\n */\nconst BackgroundController = memo(({ \n  onSceneClick, \n  onToggleParticles, \n  showParticles, \n  showInteractionHint,\n  easterEggActive,\n  interactionCount\n}) => {\n  const theme = useTheme();\n  const [showGuide, setShowGuide] = useState(false);\n  const { switchShapeType } = useSceneState();\n  \n  // Handle background click with improved logging\n  const handleBackgroundClick = useCallback(() => {\n    console.log(\"📢 BackgroundController: Scene change button clicked\");\n    \n    // Update scene context\n    switchShapeType();\n    \n    // Notify parent component\n    if (onSceneClick) {\n      console.log(\"📢 BackgroundController: Calling parent onSceneClick handler\");\n      onSceneClick();\n    }\n  }, [switchShapeType, onSceneClick]);\n  \n  // Toggle interaction guide\n  const handleToggleGuide = useCallback(() => {\n    setShowGuide(prev => !prev);\n  }, []);\n  \n  return (\n    <>\n      <Background3D \n        theme={theme} \n        onSceneClick={handleBackgroundClick} \n        performanceMode=\"medium\"\n      />\n      \n      {/* Information button only - positioned in top right */}\n      <Box\n        sx={{\n          position: 'absolute',\n          top: 90,\n          right: 30,\n          zIndex: 10,\n          display: 'flex',\n          pointerEvents: 'auto',\n        }}\n      >\n        {/* Info/help button to show interaction guide */}\n        <Tooltip title=\"Help\">\n          <IconButton \n            onClick={handleToggleGuide}\n            sx={{\n              backgroundColor: 'rgba(0,0,0,0.2)',\n              color: showGuide ? theme.palette.primary.main : 'rgba(255,255,255,0.7)',\n              '&:hover': {\n                backgroundColor: 'rgba(0,0,0,0.3)',\n              }\n            }}\n            aria-label=\"Help\"\n          >\n            <InfoOutlinedIcon />\n          </IconButton>\n        </Tooltip>\n      </Box>\n      \n      {/* Interaction guide */}\n      <InteractionGuide show={showGuide || showInteractionHint} position=\"bottom\" />\n    </>\n  );\n});\n\n// Add displayNames for memo components\nHeroBackground.displayName = 'HeroBackground';\nBackgroundController.displayName = 'BackgroundController';\n\n// Hero state management with useReducer\nconst initialHeroState = {\n  is3DVisible: false,\n  hasInitialized: false,\n  sceneIndex: 0,\n  showParticles: true,\n  sceneNameVisible: false,\n  currentSceneName: 'Sphere',\n  easterEggActive: false,\n  interactionCount: 0,\n  lastInteractionTime: 0\n};\n\nconst heroReducer = (state, action) => {\n  switch (action.type) {\n    case 'INITIALIZE':\n      return { ...state, hasInitialized: true };\n    case 'SHOW_3D':\n      return { ...state, is3DVisible: true };\n    case 'CHANGE_SCENE':\n      return {\n        ...state,\n        sceneIndex: action.payload.newIndex,\n        currentSceneName: action.payload.sceneName,\n        sceneNameVisible: true\n      };\n    case 'HIDE_SCENE_NAME':\n      return { ...state, sceneNameVisible: false };\n    case 'TOGGLE_PARTICLES':\n      return { ...state, showParticles: !state.showParticles };\n    case 'UPDATE_INTERACTION':\n      return {\n        ...state,\n        interactionCount: action.payload.count,\n        lastInteractionTime: action.payload.time\n      };\n    case 'ACTIVATE_EASTER_EGG':\n      return { ...state, easterEggActive: true };\n    case 'DEACTIVATE_EASTER_EGG':\n      return { ...state, easterEggActive: false };\n    default:\n      return state;\n  }\n};\n\n/**\n * Hero Component\n * \n * The main hero section with enhanced 3D background features:\n * - Interactive scene switching (Sphere, Cube, Torus)\n * - Particle system for ambient atmosphere\n * - Mouse-responsive animations\n */\nconst Hero = () => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const [state, dispatch] = useReducer(heroReducer, initialHeroState);\n  const interactionSequence = useRef([]);\n  \n  // Destructure state for easier access\n  const {\n    is3DVisible,\n    hasInitialized,\n    sceneIndex,\n    showParticles,\n    sceneNameVisible,\n    currentSceneName,\n    easterEggActive,\n    interactionCount,\n    lastInteractionTime\n  } = state;\n  \n  // Track rapid interactions for combo effects\n  const checkForCombo = useCallback(() => {\n    const now = Date.now();\n    if (now - lastInteractionTime < 1000) {\n      // Increment combo counter for rapid interactions\n      const newCount = interactionCount + 1;\n      // Trigger easter egg on 5 rapid clicks\n      if (newCount >= 5 && !easterEggActive) {\n        dispatch({ type: 'ACTIVATE_EASTER_EGG' });\n        setTimeout(() => dispatch({ type: 'DEACTIVATE_EASTER_EGG' }), 5000);\n        \n        // Analytics tracking\n        if (process.env.NODE_ENV === 'production') {\n          try {\n            window.gtag && window.gtag('event', 'easter_egg_activated', { \n              interaction_type: 'rapid_clicks'\n            });\n          } catch (err) {\n            console.error('Analytics error:', err);\n          }\n        }\n      }\n      dispatch({ \n        type: 'UPDATE_INTERACTION', \n        payload: { count: newCount, time: now }\n      });\n    } else {\n      // Reset combo if too much time has passed\n      dispatch({ \n        type: 'UPDATE_INTERACTION', \n        payload: { count: 1, time: now }\n      });\n    }\n  }, [lastInteractionTime, easterEggActive, interactionCount]);\n\n  // Two-phase initialization for better stability\n  useEffect(() => {\n    dispatch({ type: 'INITIALIZE' });\n    \n    const timer = setTimeout(() => {\n      dispatch({ type: 'SHOW_3D' });\n    }, 200);\n    \n    return () => clearTimeout(timer);\n  }, []);\n\n  // Get scene name based on index\n  const getSceneName = useCallback((index) => {\n    switch (index) {\n      case SHAPE_TYPES.SPHERE: return 'Sphere';\n      case SHAPE_TYPES.CUBE: return 'Cube';\n      case SHAPE_TYPES.TORUS: return 'Torus';\n      default: return 'Shape';\n    }\n  }, []);\n\n  // Handle scene click to change scene type\n  const handleSceneClick = useCallback(() => {\n    console.log(\"📢 Hero.js: handleSceneClick called - About to change scene\");\n    \n    // Track interaction sequence for pattern detection\n    interactionSequence.current.push({\n      type: 'click',\n      time: Date.now()\n    });\n    \n    // Keep sequence limited to last 10 interactions\n    if (interactionSequence.current.length > 10) {\n      interactionSequence.current.shift();\n    }\n    \n    // Check for combo effects\n    checkForCombo();\n    \n    // Cycle to next scene\n    const newSceneIndex = (sceneIndex + 1) % 3;\n    const sceneName = getSceneName(newSceneIndex);\n    \n    dispatch({ \n      type: 'CHANGE_SCENE', \n      payload: { newIndex: newSceneIndex, sceneName }\n    });\n    \n    console.log(`📢 Hero.js: Scene changed to ${sceneName} (index: ${newSceneIndex})`);\n    \n    // Hide scene name after 2 seconds\n    setTimeout(() => {\n      dispatch({ type: 'HIDE_SCENE_NAME' });\n    }, 2000);\n    \n    // Analytics tracking\n    if (process.env.NODE_ENV === 'production') {\n      try {\n        window.gtag && window.gtag('event', 'change_scene', { \n          scene_index: newSceneIndex,\n          scene_type: getSceneName(newSceneIndex)\n        });\n      } catch (err) {\n        console.error('Analytics error:', err);\n      }\n    }\n  }, [sceneIndex, getSceneName, checkForCombo]);\n\n  // Handle particle toggle\n  const handleToggleParticles = useCallback(() => {\n    dispatch({ type: 'TOGGLE_PARTICLES' });\n    \n    // Analytics tracking\n    if (process.env.NODE_ENV === 'production') {\n      try {\n        window.gtag && window.gtag('event', 'toggle_particles', { \n          show_particles: !showParticles\n        });\n      } catch (err) {\n        console.error('Analytics error:', err);\n      }\n    }\n  }, [showParticles]);\n\n  // Define z-index values\n  const zIndexes = {\n    background: theme.zIndex?.heroBackground || 5,\n    content: theme.zIndex?.heroContent || 10,\n    scrollIndicator: theme.zIndex?.scrollIndicator || 10\n  };\n\n  return (\n    <Box\n      id=\"hero\"\n      component=\"section\"\n      aria-label=\"Hero section\"\n      sx={{\n        width: '100%',\n        minHeight: { \n          xs: 'calc(100vh - 56px)',\n          sm: 'calc(100vh - 64px)'\n        },\n        display: 'flex',\n        flexDirection: 'column',\n        position: 'relative',\n        overflow: 'visible',\n        background: `linear-gradient(145deg, ${theme.palette.background.default} 0%, ${theme.palette.background.paper} 100%)`,\n        py: { xs: theme.spacing(4), md: theme.spacing(0) },\n        isolation: 'isolate',\n      }}\n    >\n      {/* Background Layer with enhanced interaction */}\n      {hasInitialized && is3DVisible && (\n        <HeroBackground \n          onSceneClick={handleSceneClick}\n          onToggleParticles={handleToggleParticles}\n          showParticles={showParticles}\n          easterEggActive={easterEggActive}\n          interactionCount={interactionCount}\n        />\n      )}\n      \n      {/* Scene name indicator - visible when changing scenes */}\n      <Fade in={sceneNameVisible} timeout={{ enter: 400, exit: 800 }}>\n        <Box\n          sx={{\n            position: 'absolute',\n            top: '30%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            backgroundColor: 'rgba(0,0,0,0.7)',\n            color: 'white',\n            padding: '8px 16px',\n            borderRadius: theme.shape.borderRadius.lg,\n            zIndex: 30,\n            pointerEvents: 'none',\n            fontSize: '16px',\n            fontWeight: 500,\n          }}\n        >\n          {currentSceneName}\n        </Box>\n      </Fade>\n      \n      {/* Content Overlay Layer */}\n      <Box\n        sx={{\n          width: '100%',\n          height: '100%',\n          minHeight: '100vh',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'flex-start',\n          position: 'relative',\n          zIndex: zIndexes.content,\n          pointerEvents: 'none', // Allow clicks to pass through to background\n          pt: { xs: 8, md: 0 },\n        }}\n      >\n        <HeroContent />\n      </Box>\n      \n      {/* Scroll Indicator - Desktop Only */}\n      {!isMobile && (\n        <Box \n          sx={{ \n            position: 'relative', \n            zIndex: zIndexes.scrollIndicator, \n            pointerEvents: 'auto',\n            mt: 'auto',\n          }}\n        >\n          <ScrollIndicator />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default Hero;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Chip } from '@mui/material';\n\n/**\n * SkillTagList Component\n * \n * Standardized tag component for displaying skills/technologies\n * Used across the portfolio for consistent styling\n */\nconst SkillTagList = ({ label, size = \"medium\", onClick, variant = \"skill\", sx = {}, ...props }) => {\n  return (\n    <Chip\n      label={label}\n      size={size}\n      onClick={onClick}\n      variant={variant}\n      sx={{\n        mx: 0.5,\n        my: 0.5,\n        ...sx\n      }}\n      {...props}\n    />\n  );\n};\n\nSkillTagList.propTypes = {\n  label: PropTypes.string.isRequired,\n  size: PropTypes.oneOf([\"small\", \"medium\"]),\n  onClick: PropTypes.func,\n  variant: PropTypes.string,\n};\n\nexport default SkillTagList;\n"],"names":["ErrorBoundary","Component","constructor","props","super","handleRefresh","this","setState","hasError","error","errorInfo","componentStack","showDetails","handleReload","window","location","reload","toggleDetails","prevState","state","getDerivedStateFromError","componentDidCatch","_errorInfo$componentS","console","gtag","error_message","message","error_component","componentName","error_stack","substring","error_type","name","render","fallback","errorStyles","children","_jsxs","Box","sx","p","display","flexDirection","alignItems","justifyContent","minHeight","width","textAlign","_jsx","ErrorOutlineIcon","color","fontSize","mb","Typography","variant","gutterBottom","maxWidth","gap","Button","startIcon","RefreshIcon","onClick","BugReportIcon","Paper","elevation","overflow","component","fontFamily","whiteSpace","wordBreak","toString","Divider","my","backgroundColor","borderRadius","maxHeight","skillsRow1","skillsRow2","HeroContent","theme","useTheme","itemVariants","hidden","opacity","y","visible","transition","duration","ease","isMobileBreakpoint","breakpoints","values","sm","position","zIndex","pointerEvents","userSelect","pl","xs","md","lg","motion","div","initial","animate","variants","staggerChildren","style","innerWidth","fontWeight","lineHeight","palette","text","primary","letterSpacing","secondary","main","flexWrap","map","skill","index","SkillTagList","label","size","scrollToSection","sectionId","options","arguments","length","undefined","offset","targetElement","document","getElementById","warn","targetPosition","getBoundingClientRect","top","pageYOffset","scrollTo","behavior","section_id","ScrollIndicator","handleClick","bottom","spacing","left","right","cursor","role","tabIndex","onKeyDown","e","key","delay","whileHover","scale","padding","typography","fontWeightRegular","repeat","Infinity","repeatType","ArrowDownwardIcon","SHAPE_TYPES","SPHERE","BOX","TORUS","CANVAS_SETTINGS","camera","fov","near","far","gl","antialias","alpha","powerPreference","preserveDrawingBuffer","DIMENSIONS","devicePixelRatio","sphere","radius","segments","cube","torus","tube","radialSegments","tubularSegments","clickDetection","SHAPE_LIMITS","mobile","desktop","SceneContext","createContext","currentShapeType","switchShapeType","isTransitioning","showParticles","toggleParticles","mousePosition","x","updateMousePosition","isDragging","updateDragging","isInteractionEnabled","setInteractionEnabled","hasInteraction","SceneProvider","_ref","setCurrentShapeType","useState","setIsTransitioning","setShowParticles","setIsDragging","setMousePosition","setIsInteractionEnabled","setHasInteraction","lastInteractionTime","useRef","Date","now","interactionTimeout","useCallback","prev","log","setTimeout","newType","current","clearTimeout","React","dragging","enabled","Provider","value","useSceneState","context","useContext","Error","hexToHSL","hex","replace","r","parseInt","substr","g","b","max","Math","min","l","h","s","d","getDynamicColor","time","energy","sceneType","isHovered","colors","extractThemeColors","shapeColors","baseColor","hoverColor","hover","timeShift","energyBoost","hue","saturation","lightness","hueShift","sin","THREE","lerp","emissiveHue","setHSL","emissive","emissiveIntensity","_theme$palette$second3","_theme$palette$primar3","_theme$palette$second4","_theme$palette$info3","_theme$palette$primar4","_theme$palette$second5","_theme$palette$second6","sceneColors","cubeGrid","accent","trail","primaryColor","secondaryColor","infoColor","_theme$palette$primar","_theme$palette$second","_theme$palette$info","_theme$palette$primar2","_theme$palette$second2","_theme$palette$info2","scene3d","box","info","light","themeColorToThreeColor","colorString","factory","initialSize","pool","activeObjects","Set","expand","get","object","pop","add","release","has","delete","push","count","i","clear","activeCount","totalCount","mouseData","easterEggActive","interactionCount","isMobile","useMediaQuery","down","shapesPool","ObjectPool","velocity","rotation","type","hovered","excitementLevel","ref","matrixAutoUpdate","autoMovement","speed","random","direction","normalize","rotationSpeed","z","timeOffset","lastPosition","activeShapes","setActiveShapes","hasMouseMoved","lastMouseMoveTime","movementBias","cursorPosition","prevCursorPosition","tempVector","tempVector2","clock","useMemo","getShapeColor","shapeType","hslColor","useEffect","nextActiveShapes","shape","theta","PI","phi","acos","set","cos","randFloat","copy","forEach","world","getElapsedTime","subVectors","lengthSq","cursorDirection","angle","prevCursorWorldPos","updateCursorDirection","currentPos","dx","dy","atan2","intensity","sqrt","useFrame","currentTime","timeSinceLastMove","worldPos","funModeActive","funModeInfluence","directionHue","directionIntensity","interactingSpheres","autoMove","autoInfluence","pulseFrequency","pulseAmplitude","pulsePhase","pulseFactor","orbitRadius","orbitSpeed","uniqueOffset","orbitX","orbitY","orbitZ","orbitForce","sub","multiplyScalar","timeInfluence","autoVelocity","rotationMultiplier","axis","absPosition","abs","limit","pushbackForce","sign","distToCursor","distanceTo","interactionRadius","strength","attractionStrength","clone","repulsionStrength","material","dynamicColors","dirColor","blendFactor","emissiveDir","needsUpdate","sphere1","j","sphere2","distanceSq","repulsionForce","forceVector","speedFactor","scaleFactor","updateMatrix","_Fragment","distance","emissiveColor","onPointerOver","onPointerOut","args","metalness","roughness","useThree","gridSize","cubeRefs","cubeStates","cursorWorldPosition","hasCursorMoved","lastCursorMoveTime","grid","xPos","zPos","targetY","currentY","lastActive","phase","amplitude","waveOrigin","waveActive","waveTime","timer","rippleCenter","rippleStrength","pow","cubeRef","finalHeight","dist","rippleDist","maxRippleDistance","ripplePhase","rippleEffect","distFromWave","waveRadius","waveWidth","distFromWaveEdge","waveIntensity","floor","baseRotationSpeed","scalePulse","viewport","torusGroupRef","torusRefs","mouseWorldPos","raycaster","mouse","timeRef","actualTorusCount","TORUS_COUNT","torusData","Array","from","_","id","event","clientX","clientY","height","setFromCamera","intersectPoint","ray","intersectPlane","torusGeometry","materials","transparent","transmission","thickness","slice","onPointerMove","meshes","filter","Boolean","intersects","intersectObjects","data","intersected","indexOf","onPointerDown","randomTorus","setScalar","addEventListener","removeEventListener","dt","t","ROTATION_SPEED","mesh","targetScale","force","dynamic","Html","center","transform","sprite","background","backdropFilter","onDoubleClick","el","geometry","transitionProgress","setTransitionProgress","startTime","transitionDuration","updateTransition","elapsed","progress","requestAnimationFrame","activeColor","themeColor","handleSceneClick","SphereScene","BoxScene","TorusScene","LoadingFallback","default","CircularProgress","enableAutoRotate","rotateSpeed","controlsRef","lastInteraction","setLastInteraction","isAutoRotating","setIsAutoRotating","lookAt","target","startTarget","updateTarget","easeProgress","newTarget","lerpVectors","idleTime","shouldAutoRotate","autoRotate","dampingFactor","handleInteraction","PerspectiveCamera","makeDefault","OrbitControls","enableZoom","minDistance","maxDistance","zoomSpeed","enablePan","minPolarAngle","maxPolarAngle","autoRotateSpeed","domElement","onStart","onEnd","onChange","screenPosition","setScreenPosition","normalizedPosition","setNormalizedPosition","isActive","setIsActive","getElement","documentElement","normalizeScreenPosition","rect","handleMouseMove","normalized","handleMouseDown","handleMouseUp","handleTouchStart","touches","handleTouchMove","handleTouchEnd","element","passive","screen","forThree","virtualPlane","worldPosition","enhancedMouseData","Background3DInner","onSceneClick","performanceMode","WorldMouseListener","InteractiveCamera","penumbra","castShadow","ActiveScene","_ref2","containerRef","isLoading","setIsLoading","useMouseTracking","handleLoaded","Canvas","visibility","touchAction","onCreated","dpr","show","autoHideDelay","setVisible","isTouchDevice","setIsTouchDevice","navigator","maxTouchPoints","instructions","action","Fade","in","timeout","enter","exit","bgcolor","boxShadow","shadows","TouchAppIcon","mt","MouseIcon","ThreeDRotationIcon","HeroBackground","memo","onToggleParticles","showInteractionHint","setShowInteractionHint","BackgroundController","showGuide","setShowGuide","handleBackgroundClick","handleToggleGuide","Background3D","Tooltip","title","IconButton","InfoOutlinedIcon","InteractionGuide","displayName","initialHeroState","is3DVisible","hasInitialized","sceneIndex","sceneNameVisible","currentSceneName","heroReducer","payload","newIndex","sceneName","Hero","_theme$zIndex","_theme$zIndex2","_theme$zIndex3","dispatch","useReducer","interactionSequence","checkForCombo","newCount","interaction_type","err","getSceneName","CUBE","shift","newSceneIndex","scene_index","scene_type","handleToggleParticles","show_particles","zIndexes","heroBackground","content","heroContent","scrollIndicator","paper","py","isolation","pt","Chip","mx"],"sourceRoot":""}